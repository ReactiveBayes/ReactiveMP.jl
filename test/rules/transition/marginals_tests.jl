
@testitem "marginalrules:Transition" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions, LinearAlgebra

    import ReactiveMP: @test_marginalrules

    @testset "out_in: (m_out::Categorical, m_in::Categorical, q_a::DirichletCollection)" begin
        @test_marginalrules [check_type_promotion = false] Transition(:out_in) [(
            input = (m_out = Categorical([0.2, 0.5, 0.3]), m_in = Categorical([0.7, 0.1, 0.2]), q_a = DirichletCollection([3.0 2.0 2.0; 2.0 3.0 2.0; 2.0 2.0 3.0])),
            output = Contingency(
                [
                    0.1986102968597683 0.017209033482868178 0.034418066965736356
                    0.30115808595019306 0.07093224887848869 0.08604516741434089
                    0.18069485157011583 0.025813550224302262 0.08511869865418642
                ]
            )
        )]
    end

    @testset "out_in_t1: (m_out::Categorical, m_in::Categorical, m_t1::Categorical, q_a::DirichletCollection)" begin
        @test_marginalrules [check_type_promotion = false] Transition(:out_in_t1) [
            (
                input = (
                    m_out = Categorical([0.2, 0.5, 0.3]),
                    m_in = Categorical([0.7, 0.1, 0.2]),
                    m_t1 = Categorical([0.01, 0.9, 0.09]),
                    q_a = DirichletCollection([3.0 2.0 2.0; 2.0 3.0 2.0; 2.0 2.0 3.0;;; 3.0 2.0 2.0; 2.0 3.0 2.0; 2.0 2.0 3.0;;; 3.0 2.0 2.0; 2.0 3.0 2.0; 2.0 2.0 3.0])
                ),
                output = Contingency(
                    [
                        0.001986102968597683 0.0001720903348286818 0.0003441806696573636; 0.0030115808595019304 0.0007093224887848868 0.0008604516741434088; 0.0018069485157011583 0.0002581355022430226 0.0008511869865418641;;;
                        0.17874926717379147 0.015488130134581363 0.030976260269162725; 0.2710422773551738 0.06383902399063981 0.0774406506729068; 0.16262536641310427 0.023232195201872037 0.07660682878876778;;;
                        0.017874926717379145 0.001548813013458136 0.003097626026916272; 0.027104227735517378 0.006383902399063981 0.007744065067290678; 0.016262536641310426 0.0023232195201872037 0.007660682878876776
                    ]
                )
            ),
            (
                input = (
                    m_out = Categorical([0, 1, 0]),
                    m_in = Categorical([0, 1, 0]),
                    m_t1 = Categorical([0, 0, 1]),
                    q_a = DirichletCollection([3.0 2.0 2.0; 2.0 3.0 2.0; 2.0 2.0 3.0;;; 3.0 2.0 2.0; 2.0 3.0 2.0; 2.0 2.0 3.0;;; 3.0 2.0 2.0; 2.0 3.0 2.0; 2.0 2.0 3.0])
                ),
                output = Contingency([
                    0.0 0.0 0.0; 0.0 0.0 0.0; 0.0 0.0 0.0;;;
                    0.0 0.0 0.0; 0.0 0.0 0.0; 0.0 0.0 0.0;;;
                    0.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 0.0
                ])
            )
        ]
    end

    @testset "out_in_t1_t2: (m_out::Categorical, m_in::Categorical, m_t1::Categorical, m_t2::Categorical, q_a::DirichletCollection)" begin
        @test_marginalrules [check_type_promotion = false] Transition(:out_in_t1_t2) [(
            input = (
                m_out = Categorical([0.2, 0.5, 0.3]),
                m_in = Categorical([0.7, 0.1, 0.2]),
                m_t1 = Categorical([0.01, 0.9, 0.09]),
                m_t2 = Categorical([0.25, 0.01, 0.09, 0.65]),
                q_a = DirichletCollection(
                    [
                        3.4814561121678347 2.5351658244027844 2.0637422006197856; 2.2919979590901685 3.5854980740024467 2.057024456382512; 2.961498802369847 2.2641205050393607 3.2344282382034804;;; 3.748169016349685 2.1522033841434904 2.9468022556183513; 2.3868319648098764 3.3058305246781945 2.6555313055477683; 2.153603001551738 2.1909039151153378 3.218338677959591;;; 3.76759376279165 2.67577869934414 2.9092268547954774; 2.2886069210422426 3.7986205864251543 2.5056888207498655; 2.2768291735341766 2.2200857998842514 3.057692286732935;;;;
                        3.2742052774819848 2.4495891683271696 2.910828066613324; 2.5896672232696503 3.469476528069095 2.3827465484202577; 2.2438457120549247 2.6260212280800417 3.295102517531366;;; 3.0224009062118107 2.9849350862212414 2.3587228609218913; 2.2727605127367476 3.5102889560557706 2.8243063953618273; 2.511594139684071 2.7428760858629246 3.910232940256628;;; 3.1338212505134146 2.303530993403952 2.7961593523809443; 2.9308944983075493 3.8464245809821307 2.666661277436305; 2.3613769215551983 2.0716049642237397 3.8418737601142907;;;;
                        3.199501489096538 2.137518268035324 2.2408411282891665; 2.018092973870658 3.9235861067050033 2.7024020409406586; 2.6474910666238243 2.8381488044892156 3.707495905126347;;; 3.8476286872449337 2.3304782998090983 2.4655689133178282; 2.9433720367760063 3.5064531916942263 2.1306271953512823; 2.1371102642348183 2.867051597898455 3.6355716472274127;;; 3.871567868158627 2.398172641112016 2.4104536086573325; 2.862391328670923 3.796451684660049 2.019185201609586; 2.7614244667946997 2.8789865894397155 3.7383014331832483;;;;
                        3.881225479462249 2.2954511016342427 2.7405225916860303; 2.6750638439694003 3.341534956301027 2.6703959167706186; 2.8461081506237194 2.7026253701192577 3.0188263005741622;;; 3.0488670662223054 2.0029971596452283 2.160458108078882; 2.5907129699378246 3.1715956194931714 2.9269873994895623; 2.756186325418192 2.3609090734349567 3.688167146789853;;; 3.906810674829052 2.808930999947986 2.5749185772777476; 2.3358640383658136 3.3937346187125024 2.6150136277384557; 2.2931807105355295 2.6214291139700827 3.6118464498460283
                    ]
                )
            ),
            output = Contingency(
                [
                    0.00012722338894496782 1.3022463411054439e-5 2.3158773040985717e-5; 0.00019265723394137817 4.9093360894474115e-5 5.7655750159444724e-5; 0.00015788411353765338 1.6983987794485747e-5 6.010648836077194e-5;;; 0.013178927757294632 0.0010542583344193288 0.0026629508290819644; 0.019279198227000676 0.004434759171177195 0.005875968179603495; 0.010170243238045414 0.0016174242002469851 0.004432132400365538;;; 0.001318205158406199 0.00012042898201068178 0.00027369494386151537; 0.0018193995993215945 0.0004542886984016782 0.0005713274331452671; 0.0010846223508451313 0.0001435049394841303 0.0004355069391263673;;;;
                    5.1286316330728594e-6 4.894739000052876e-7 1.1997751386684061e-6; 9.695571155233414e-6 1.852908417921917e-6 2.3524534129870656e-6; 4.87320647236301e-6 7.993604640097737e-7 2.082874375208284e-6;;; 0.0004374150538359077 5.14976787531794e-5 7.872612278913694e-5; 0.0007733517629102456 0.00015564227997362512 0.0002451226065796317; 0.0005250959255472306 6.982301738650833e-5 0.0002149358268849241;;; 4.208793120980026e-5 4.2529473919388285e-6 9.455515421222158e-6; 9.720951505197967e-5 1.9560393175950377e-5 2.2325990735847952e-5; 4.4868373640979835e-5 5.579402390992366e-6 2.056044991429916e-5;;;;
                    4.6405678398183326e-5 3.55905436914347e-6 7.785118026404092e-6; 6.598607617445748e-5 1.8395813506114248e-5 2.4506351808675896e-5; 5.554843967911595e-5 7.567494073295783e-6 2.1321688043455643e-5;;; 0.004518107504302185 0.00036554421801970194 0.0008316632808738873; 0.008270032858940277 0.0014899847467708608 0.001732538023087781; 0.003350992023479249 0.0007057614806289696 0.001977797041473378;;; 0.0004263541855616303 3.624499174801884e-5 8.155365325340587e-5; 0.000749567905431587 0.0001562183319223116 0.0001630999799901975; 0.00043079572234991777 6.787271668048047e-5 0.00020590461660051907;;;;
                    0.000346689198530034 3.0121466426002132e-5 7.400594751234022e-5; 0.0005602929900117366 0.00011831603447926764 0.00017931562091896792; 0.0003621908181066448 5.520705962851366e-5 0.00012459361828002287;;; 0.026586609038591547 0.002540844420799181 0.004759775296735686; 0.054679569154396444 0.011161289980470982 0.017264242519374518; 0.03535978938336349 0.004691761062668513 0.013568616711277714;;; 0.0034822255538199177 0.00032680711645289906 0.0005899745083016601; 0.004730174550604292 0.001021187375290388 0.0015029285989940897; 0.002773625987891417 0.00045101159461917554 0.001320470818930216
                ]
            )
        )]
    end
end
