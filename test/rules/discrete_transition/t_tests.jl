
@testitem "rules:DiscreteTransition:T:Belief Propagation (m_out::Categorical, m_in::Categorical, q_a::PointMass)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
        (
            input = (
                m_out = Categorical([0.2, 0.5, 0.3]),
                m_in = Categorical([0.2, 0.5, 0.3]),
                q_a = PointMass([1.0 6.0 32.0; 2.0 2.0 9.0; 5.0 5.0 6.0;;; 9.0 5.0 6.0; 4.0 10.0 6.0; 10.0 6.0 32.0;;; 6.0 1.0 8.0; 2.0 10.0 7.0; 1.0 3.0 8.0])
            ),
            output = Categorical([1 / 3, 1 / 3, 1 / 3])
        ),
        (
            input = (
                m_out = Categorical([0.2, 0.5, 0.3]),
                m_in = Categorical([0.2, 0.5, 0.3]),
                q_a = PointMass([1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0;;; 1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0;;; 1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0])
            ),
            output = Categorical([1 / 3, 1 / 3, 1 / 3])
        ),
        (
            input = (
                m_out = Categorical([0.2, 0.5, 0.3]), m_in = Categorical([0.2, 0.5, 0.3]), q_a = PointMass([1 0 0; 0 1 0; 0 0 1;;; 1 0 0; 0 1 0; 0 0 1;;; 1 0 0; 0 1 0; 0 0 1])
            ),
            output = Categorical([1 / 3, 1 / 3, 1 / 3])
        )
    ]
end

@testitem "rules:DiscreteTransition:T:Belief Propagation (q_out::PointMass, m_in::Categorical, q_a::PointMass)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
        (
            input = (
                q_out = PointMass([1.0, 0.0, 0.0]),
                m_in = Categorical([0.2, 0.5, 0.3]),
                q_a = PointMass([1.0 6.0 32.0; 2.0 2.0 9.0; 5.0 5.0 6.0;;; 9.0 5.0 6.0; 4.0 10.0 6.0; 10.0 6.0 32.0;;; 6.0 1.0 8.0; 2.0 10.0 7.0; 1.0 3.0 8.0])
            ),
            output = Categorical([0.5565217391304348, 0.2652173913043478, 0.17826086956521736])
        ),
        (
            input = (
                q_out = PointMass([1.0, 0.0, 0.0]),
                m_in = Categorical([0.2, 0.5, 0.3]),
                q_a = PointMass([1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0;;; 1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0;;; 1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0])
            ),
            output = Categorical([1 / 3, 1 / 3, 1 / 3])
        )
    ]
    @test_rules [check_type_promotion = false] DiscreteTransition(:T1, Marginalisation) [(
        input = (q_out = PointMass([1.0, 0.0, 0.0]), m_in = Categorical([0.2, 0.5, 0.3]), q_a = PointMass([1 0 0; 0 1 0; 0 0 1;;; 1 0 0; 0 1 0; 0 0 1;;; 1 0 0; 0 1 0; 0 0 1])),
        output = Categorical([1 / 3, 1 / 3, 1 / 3])
    )]
end

@testitem "rules:DiscreteTransition:T:Belief Propagation: (m_out::Categorical, m_in::Categorical, q_a::DirichletCollection)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
        (
            input = (
                m_out = Categorical([0.0510559014089735, 0.05387178800920238, 0.8950723105818241]),
                m_in = Categorical([0.054929868794045565, 0.04163049496789134, 0.9034396362380631]),
                q_a = DirichletCollection([1.0 6.0 32.0; 2.0 2.0 9.0; 5.0 5.0 6.0;;; 9.0 5.0 6.0; 4.0 10.0 6.0; 10.0 6.0 32.0;;; 6.0 1.0 8.0; 2.0 10.0 7.0; 1.0 3.0 8.0])
            ),
            output = Categorical([0.16071994681128632, 0.5608867375006992, 0.27839331568801456])
        ),
        (
            input = (
                m_out = Categorical([0.03485782178222314, 0.01245130553310446, 0.9526908726846723]),
                m_in = Categorical([0.06468167584028221, 0.0649680496982824, 0.8703502744614353]),
                q_a = DirichletCollection([8.0 9.0 37.0; 5.0 9.0 8.0; 6.0 9.0 3.0;;; 3.0 4.0 7.0; 7.0 4.0 3.0; 8.0 6.0 34.0;;; 5.0 10.0 2.0; 3.0 2.0 3.0; 4.0 10.0 7.0])
            ),
            output = Categorical([0.08216104573408281, 0.5240321267913837, 0.3938068274745334])
        ),
        (
            input = (
                m_out = Categorical([0.013906945163896326, 0.014657675872327216, 0.9714353789637764]),
                m_in = Categorical([0.06213023407554826, 0.07345989690934168, 0.8644098690151101]),
                q_a = DirichletCollection([10.0 1.0 36.0; 1.0 1.0 7.0; 2.0 9.0 4.0;;; 2.0 5.0 9.0; 1.0 9.0 1.0; 8.0 7.0 33.0;;; 6.0 2.0 1.0; 7.0 3.0 2.0; 1.0 7.0 4.0])
            ),
            output = Categorical([0.10371781881719036, 0.5257747986340537, 0.37050738254875604])
        ),
        (
            input = (
                m_out = Categorical([0.061610939826165154, 0.06994219293747578, 0.868446867236359]),
                m_in = Categorical([0.038785774762193144, 0.017316838524837008, 0.9438973867129699]),
                q_a = DirichletCollection([9.0 1.0 37.0; 9.0 9.0 8.0; 10.0 2.0 7.0;;; 5.0 10.0 2.0; 9.0 9.0 8.0; 8.0 5.0 33.0;;; 5.0 9.0 1.0; 2.0 4.0 10.0; 2.0 1.0 5.0])
            ),
            output = Categorical([0.1524663903301974, 0.5879220226683617, 0.2596115870014409])
        ),
        (
            input = (
                m_out = Categorical([0.059854086369599824, 0.044893636911381464, 0.8952522767190187]),
                m_in = Categorical([0.0056135853425655965, 0.03575690970940535, 0.958629504948029]),
                q_a = DirichletCollection([6.0 1.0 32.0; 8.0 7.0 1.0; 9.0 1.0 9.0;;; 10.0 10.0 4.0; 2.0 9.0 9.0; 3.0 2.0 33.0;;; 1.0 3.0 5.0; 7.0 8.0 7.0; 7.0 8.0 2.0])
            ),
            output = Categorical([0.22345398380365966, 0.6247689354236513, 0.1517770807726892])
        )
    ]
end

@testitem "rules:DiscreteTransition:T:Belief Propagation: (m_out::Categorical, m_in::Categorical, q_a::DirichletCollection, m_t2::Categorical)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
        (
            input = (
                m_out = Categorical([0.08799332630703943, 0.29132551818215013, 0.6206811555108104]),
                m_in = Categorical([0.11240998953463174, 0.5372891244719414, 0.35030088599342685]),
                q_a = DirichletCollection(
                    [
                        14.0 10.0 1.0; 6.0 8.0 1.0; 3.0 10.0 7.0;;; 14.0 3.0 3.0; 4.0 9.0 3.0; 5.0 5.0 14.0;;; 9.0 10.0 1.0; 3.0 7.0 4.0; 8.0 2.0 12.0;;;;
                        13.0 9.0 1.0; 9.0 7.0 8.0; 5.0 1.0 11.0;;; 8.0 7.0 4.0; 1.0 14.0 7.0; 4.0 10.0 6.0;;; 15.0 5.0 5.0; 7.0 6.0 5.0; 7.0 3.0 10.0;;;;
                        15.0 7.0 8.0; 5.0 10.0 9.0; 6.0 3.0 14.0;;; 7.0 1.0 6.0; 3.0 12.0 5.0; 3.0 5.0 9.0;;; 15.0 5.0 9.0; 9.0 12.0 10.0; 3.0 7.0 10.0;;;;
                        13.0 4.0 8.0; 4.0 8.0 2.0; 5.0 10.0 11.0;;; 15.0 4.0 8.0; 9.0 15.0 2.0; 5.0 2.0 12.0;;; 14.0 1.0 8.0; 10.0 6.0 5.0; 5.0 6.0 13.0
                    ]
                ),
                m_T2 = Categorical([0.09240952821382971, 0.3184996197469503, 0.3995918737894391, 0.18949897824978093])
            ),
            output = Categorical([0.3204124841029019, 0.34442455887321344, 0.3351629570238847])
        ),
        (
            input = (
                m_out = Categorical([0.41399930903334414, 0.2569572285438312, 0.32904346242282473]),
                m_in = Categorical([0.2712971200834005, 0.3827161804909996, 0.3459866994255999]),
                q_a = DirichletCollection(
                    [
                        15.0 4.0 4.0; 6.0 11.0 5.0; 1.0 1.0 14.0;;; 6.0 9.0 8.0; 10.0 10.0 5.0; 6.0 2.0 13.0;;; 13.0 2.0 7.0; 3.0 9.0 6.0; 5.0 5.0 7.0;;;;
                        7.0 2.0 9.0; 6.0 8.0 2.0; 6.0 4.0 12.0;;; 13.0 4.0 3.0; 1.0 10.0 2.0; 7.0 7.0 8.0;;; 9.0 9.0 4.0; 1.0 10.0 3.0; 4.0 4.0 12.0;;;;
                        13.0 5.0 5.0; 1.0 7.0 1.0; 7.0 5.0 11.0;;; 9.0 10.0 6.0; 6.0 13.0 1.0; 9.0 2.0 8.0;;; 13.0 9.0 4.0; 6.0 12.0 2.0; 10.0 1.0 13.0;;;;
                        9.0 6.0 8.0; 3.0 7.0 9.0; 8.0 4.0 11.0;;; 12.0 3.0 4.0; 2.0 11.0 9.0; 6.0 7.0 11.0;;; 13.0 6.0 10.0; 3.0 9.0 9.0; 10.0 10.0 6.0
                    ]
                ),
                m_T2 = Categorical([0.2284278504147311, 0.1734009515489395, 0.1685400610240271, 0.4296311370123022])
            ),
            output = Categorical([0.33252217570544323, 0.3303090112079051, 0.33716881308665164])
        ),
        (
            input = (
                m_out = Categorical([0.28007415705382577, 0.362168131823555, 0.35775771112261917]),
                m_in = Categorical([0.24450475682493267, 0.4963764838006123, 0.25911875937445494]),
                q_a = DirichletCollection(
                    [
                        12.0 9.0 1.0; 2.0 8.0 7.0; 10.0 1.0 13.0;;; 11.0 8.0 7.0; 10.0 14.0 7.0; 5.0 2.0 15.0;;; 8.0 4.0 4.0; 7.0 11.0 5.0; 4.0 10.0 6.0;;;;
                        14.0 3.0 7.0; 8.0 15.0 2.0; 5.0 8.0 15.0;;; 7.0 7.0 4.0; 6.0 11.0 2.0; 10.0 9.0 12.0;;; 11.0 7.0 4.0; 2.0 7.0 4.0; 1.0 1.0 15.0;;;;
                        13.0 7.0 5.0; 6.0 15.0 7.0; 9.0 5.0 14.0;;; 7.0 2.0 7.0; 1.0 7.0 2.0; 5.0 8.0 9.0;;; 13.0 5.0 2.0; 3.0 7.0 5.0; 9.0 10.0 14.0;;;;
                        14.0 10.0 3.0; 8.0 15.0 9.0; 8.0 2.0 13.0;;; 14.0 10.0 5.0; 2.0 11.0 4.0; 6.0 3.0 11.0;;; 9.0 8.0 10.0; 9.0 6.0 8.0; 5.0 3.0 6.0
                    ]
                ),
                m_T2 = Categorical([0.013289905256330505, 0.03916840092344259, 0.6158904501712571, 0.3316512436489697])
            ),
            output = Categorical([0.33852639912537374, 0.3291567669590365, 0.3323168339155897])
        ),
        (
            input = (
                m_out = Categorical([0.231721871481526, 0.43974647264393085, 0.3285316558745432]),
                m_in = Categorical([0.16173494859799328, 0.5444108919070189, 0.2938541594949879]),
                q_a = DirichletCollection(
                    [
                        11.0 8.0 5.0; 5.0 7.0 10.0; 2.0 1.0 11.0;;; 15.0 8.0 4.0; 8.0 12.0 3.0; 6.0 6.0 14.0;;; 13.0 10.0 8.0; 1.0 8.0 7.0; 8.0 8.0 14.0;;;;
                        8.0 4.0 8.0; 9.0 13.0 3.0; 8.0 2.0 7.0;;; 10.0 8.0 10.0; 5.0 11.0 8.0; 2.0 8.0 8.0;;; 10.0 3.0 2.0; 9.0 11.0 5.0; 10.0 4.0 15.0;;;;
                        10.0 7.0 9.0; 1.0 14.0 10.0; 10.0 5.0 15.0;;; 7.0 9.0 7.0; 5.0 14.0 1.0; 9.0 9.0 6.0;;; 15.0 7.0 3.0; 7.0 8.0 4.0; 2.0 2.0 14.0;;;;
                        14.0 7.0 2.0; 3.0 7.0 6.0; 4.0 9.0 15.0;;; 13.0 1.0 7.0; 3.0 12.0 4.0; 1.0 7.0 14.0;;; 7.0 7.0 3.0; 2.0 7.0 4.0; 8.0 9.0 10.0
                    ]
                ),
                m_T2 = Categorical([0.3924160844603588, 0.34208347405766765, 0.0742389939993073, 0.19126144748266627])
            ),
            output = Categorical([0.3336500717081419, 0.33405984098175184, 0.33229008731010634])
        ),
        (
            input = (
                m_out = Categorical([0.3438709572699468, 0.327896945058581, 0.3282320976714722]),
                m_in = Categorical([0.08064616359815222, 0.3016652714857759, 0.6176885649160718]),
                q_a = DirichletCollection(
                    [
                        10.0 9.0 2.0; 6.0 8.0 10.0; 7.0 1.0 11.0;;; 8.0 5.0 2.0; 5.0 7.0 3.0; 8.0 1.0 8.0;;; 15.0 5.0 7.0; 4.0 13.0 6.0; 3.0 8.0 7.0;;;;
                        10.0 9.0 4.0; 6.0 12.0 10.0; 6.0 6.0 12.0;;; 12.0 8.0 3.0; 3.0 15.0 3.0; 6.0 3.0 10.0;;; 6.0 5.0 8.0; 8.0 6.0 10.0; 8.0 5.0 11.0;;;;
                        15.0 2.0 7.0; 9.0 14.0 3.0; 7.0 4.0 11.0;;; 15.0 5.0 8.0; 10.0 6.0 2.0; 1.0 8.0 12.0;;; 8.0 2.0 8.0; 3.0 12.0 6.0; 5.0 8.0 10.0;;;;
                        14.0 2.0 2.0; 10.0 10.0 2.0; 1.0 4.0 9.0;;; 10.0 1.0 7.0; 1.0 6.0 3.0; 1.0 10.0 13.0;;; 6.0 8.0 4.0; 4.0 9.0 3.0; 3.0 2.0 9.0
                    ]
                ),
                m_T2 = Categorical([0.11248216922354308, 0.026994470113754852, 0.4375353107069617, 0.4229880499557404])
            ),
            output = Categorical([0.3314741303273284, 0.33435785748140795, 0.3341680121912637])
        )
    ]
end

@testitem "rules:DiscreteTransition:T:Belief Propagation: (m_out::Categorical, m_in::Categorical, q_a::DirichletCollection, m_T1::Categorical)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:t2, Marginalisation) [
        (
            input = (
                m_out = Categorical([0.08799332630703943, 0.29132551818215013, 0.6206811555108104]),
                m_in = Categorical([0.2516472953196383, 0.3420258883005958, 0.40632681637976575]),
                q_a = DirichletCollection(
                    [
                        14.0 10.0 1.0; 6.0 8.0 1.0; 3.0 10.0 7.0;;; 14.0 3.0 3.0; 4.0 9.0 3.0; 5.0 5.0 14.0;;; 9.0 10.0 1.0; 3.0 7.0 4.0; 8.0 2.0 12.0;;;;
                        13.0 9.0 1.0; 9.0 7.0 8.0; 5.0 1.0 11.0;;; 8.0 7.0 4.0; 1.0 14.0 7.0; 4.0 10.0 6.0;;; 15.0 5.0 5.0; 7.0 6.0 5.0; 7.0 3.0 10.0;;;;
                        15.0 7.0 8.0; 5.0 10.0 9.0; 6.0 3.0 14.0;;; 7.0 1.0 6.0; 3.0 12.0 5.0; 3.0 5.0 9.0;;; 15.0 5.0 9.0; 9.0 12.0 10.0; 3.0 7.0 10.0;;;;
                        13.0 4.0 8.0; 4.0 8.0 2.0; 5.0 10.0 11.0;;; 15.0 4.0 8.0; 9.0 15.0 2.0; 5.0 2.0 12.0;;; 14.0 1.0 8.0; 10.0 6.0 5.0; 5.0 6.0 13.0
                    ]
                ),
                m_T1 = Categorical([0.11240998953463174, 0.5372891244719414, 0.35030088599342685])
            ),
            output = Categorical([0.2736744772456484, 0.23881821104809484, 0.2388250291499574, 0.2486822825562994])
        ),
        (
            input = (
                m_out = Categorical([0.41399930903334414, 0.2569572285438312, 0.32904346242282473]),
                m_in = Categorical([0.3580424644840306, 0.31051652805186924, 0.3314410074641002]),
                q_a = DirichletCollection(
                    [
                        15.0 4.0 4.0; 6.0 11.0 5.0; 1.0 1.0 14.0;;; 6.0 9.0 8.0; 10.0 10.0 5.0; 6.0 2.0 13.0;;; 13.0 2.0 7.0; 3.0 9.0 6.0; 5.0 5.0 7.0;;;;
                        7.0 2.0 9.0; 6.0 8.0 2.0; 6.0 4.0 12.0;;; 13.0 4.0 3.0; 1.0 10.0 2.0; 7.0 7.0 8.0;;; 9.0 9.0 4.0; 1.0 10.0 3.0; 4.0 4.0 12.0;;;;
                        13.0 5.0 5.0; 1.0 7.0 1.0; 7.0 5.0 11.0;;; 9.0 10.0 6.0; 6.0 13.0 1.0; 9.0 2.0 8.0;;; 13.0 9.0 4.0; 6.0 12.0 2.0; 10.0 1.0 13.0;;;;
                        9.0 6.0 8.0; 3.0 7.0 9.0; 8.0 4.0 11.0;;; 12.0 3.0 4.0; 2.0 11.0 9.0; 6.0 7.0 11.0;;; 13.0 6.0 10.0; 3.0 9.0 9.0; 10.0 10.0 6.0
                    ]
                ),
                m_T1 = Categorical([0.2712971200834005, 0.3827161804909996, 0.3459866994255999])
            ),
            output = Categorical([0.2456412839560082, 0.25071835307616863, 0.25386159128651975, 0.24977877168130333])
        ),
        (
            input = (
                m_out = Categorical([0.28007415705382577, 0.362168131823555, 0.35775771112261917]),
                m_in = Categorical([0.31784517029280823, 0.34141019417661717, 0.3407446355305746]),
                q_a = DirichletCollection(
                    [
                        12.0 9.0 1.0; 2.0 8.0 7.0; 10.0 1.0 13.0;;; 11.0 8.0 7.0; 10.0 14.0 7.0; 5.0 2.0 15.0;;; 8.0 4.0 4.0; 7.0 11.0 5.0; 4.0 10.0 6.0;;;;
                        14.0 3.0 7.0; 8.0 15.0 2.0; 5.0 8.0 15.0;;; 7.0 7.0 4.0; 6.0 11.0 2.0; 10.0 9.0 12.0;;; 11.0 7.0 4.0; 2.0 7.0 4.0; 1.0 1.0 15.0;;;;
                        13.0 7.0 5.0; 6.0 15.0 7.0; 9.0 5.0 14.0;;; 7.0 2.0 7.0; 1.0 7.0 2.0; 5.0 8.0 9.0;;; 13.0 5.0 2.0; 3.0 7.0 5.0; 9.0 10.0 14.0;;;;
                        14.0 10.0 3.0; 8.0 15.0 9.0; 8.0 2.0 13.0;;; 14.0 10.0 5.0; 2.0 11.0 4.0; 6.0 3.0 11.0;;; 9.0 8.0 10.0; 9.0 6.0 8.0; 5.0 3.0 6.0
                    ]
                ),
                m_T1 = Categorical([0.24450475682493267, 0.4963764838006123, 0.25911875937445494])
            ),
            output = Categorical([0.2521503739599087, 0.25077911660660274, 0.25010306073581035, 0.24696744869767814])
        ),
        (
            input = (
                m_out = Categorical([0.231721871481526, 0.43974647264393085, 0.3285316558745432]),
                m_in = Categorical([0.305396640756791, 0.36076561844428456, 0.3338377407989245]),
                q_a = DirichletCollection(
                    [
                        11.0 8.0 5.0; 5.0 7.0 10.0; 2.0 1.0 11.0;;; 15.0 8.0 4.0; 8.0 12.0 3.0; 6.0 6.0 14.0;;; 13.0 10.0 8.0; 1.0 8.0 7.0; 8.0 8.0 14.0;;;;
                        8.0 4.0 8.0; 9.0 13.0 3.0; 8.0 2.0 7.0;;; 10.0 8.0 10.0; 5.0 11.0 8.0; 2.0 8.0 8.0;;; 10.0 3.0 2.0; 9.0 11.0 5.0; 10.0 4.0 15.0;;;;
                        10.0 7.0 9.0; 1.0 14.0 10.0; 10.0 5.0 15.0;;; 7.0 9.0 7.0; 5.0 14.0 1.0; 9.0 9.0 6.0;;; 15.0 7.0 3.0; 7.0 8.0 4.0; 2.0 2.0 14.0;;;;
                        14.0 7.0 2.0; 3.0 7.0 6.0; 4.0 9.0 15.0;;; 13.0 1.0 7.0; 3.0 12.0 4.0; 1.0 7.0 14.0;;; 7.0 7.0 3.0; 2.0 7.0 4.0; 8.0 9.0 10.0
                    ]
                ),
                m_T1 = Categorical([0.16173494859799328, 0.5444108919070189, 0.2938541594949879])
            ),
            output = Categorical([0.24769360939236879, 0.2570979400410685, 0.24636800327908906, 0.24884044728747362])
        ),
        (
            input = (
                m_out = Categorical([0.3438709572699468, 0.327896945058581, 0.3282320976714722]),
                m_in = Categorical([0.33437642195805395, 0.3321767052616158, 0.33344687278033025]),
                q_a = DirichletCollection(
                    [
                        10.0 9.0 2.0; 6.0 8.0 10.0; 7.0 1.0 11.0;;; 8.0 5.0 2.0; 5.0 7.0 3.0; 8.0 1.0 8.0;;; 15.0 5.0 7.0; 4.0 13.0 6.0; 3.0 8.0 7.0;;;;
                        10.0 9.0 4.0; 6.0 12.0 10.0; 6.0 6.0 12.0;;; 12.0 8.0 3.0; 3.0 15.0 3.0; 6.0 3.0 10.0;;; 6.0 5.0 8.0; 8.0 6.0 10.0; 8.0 5.0 11.0;;;;
                        15.0 2.0 7.0; 9.0 14.0 3.0; 7.0 4.0 11.0;;; 15.0 5.0 8.0; 10.0 6.0 2.0; 1.0 8.0 12.0;;; 8.0 2.0 8.0; 3.0 12.0 6.0; 5.0 8.0 10.0;;;;
                        14.0 2.0 2.0; 10.0 10.0 2.0; 1.0 4.0 9.0;;; 10.0 1.0 7.0; 1.0 6.0 3.0; 1.0 10.0 13.0;;; 6.0 8.0 4.0; 4.0 9.0 3.0; 3.0 2.0 9.0
                    ]
                ),
                m_T1 = Categorical([0.08064616359815222, 0.3016652714857759, 0.6176885649160718])
            ),
            output = Categorical([0.2505213451093424, 0.25068976800157844, 0.25100559750160933, 0.2477832893874698])
        )
    ]
end

@testitem "rules:DiscreteTransition:T:Additional T-interface tests for Belief Propagation" begin
    # Test T1 interface with 3 interfaces (BP with DirichletCollection q_a)
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules, normalize!
    @testset "Belief Propagation: T1 with 3 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    q_a = DirichletCollection(
                        [
                            1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0;;;
                            10.0 11.0 12.0; 13.0 14.0 15.0; 16.0 17.0 18.0;;;
                            19.0 20.0 21.0; 22.0 23.0 24.0; 25.0 26.0 27.0
                        ]
                    )
                ),
                output = Categorical([0.3225303238396506, 0.3371283233297158, 0.34034135283063355])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    q_a = DirichletCollection([
                        5.0 1.0 2.0; 3.0 8.0 4.0; 6.0 7.0 9.0;;;
                        2.0 4.0 6.0; 8.0 10.0 12.0; 14.0 16.0 18.0;;;
                        1.0 3.0 5.0; 7.0 9.0 11.0; 13.0 15.0 17.0
                    ])
                ),
                output = Categorical([0.33286298505659456, 0.3432827250726305, 0.3238542898707749])
            )
        ]
    end

    # Test T1 interface with 3 interfaces (BP with PointMass q_a)
    @testset "Belief Propagation: T1 with 3 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0;;;
                                10.0 11.0 12.0; 13.0 14.0 15.0; 16.0 17.0 18.0;;;
                                19.0 20.0 21.0; 22.0 23.0 24.0; 25.0 26.0 27.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.12056737588652484, 0.3333333333333333, 0.546099290780142])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    q_a = PointMass(
                        normalize!(
                            [
                                5.0 1.0 2.0; 3.0 8.0 4.0; 6.0 7.0 9.0;;;
                                2.0 4.0 6.0; 8.0 10.0 12.0; 14.0 16.0 18.0;;;
                                1.0 3.0 5.0; 7.0 9.0 11.0; 13.0 15.0 17.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.2163742690058479, 0.4210526315789473, 0.3625730994152047])
            )
        ]
    end

    # Test T1 interface with 4 interfaces (BP with DirichletCollection q_a)
    @testset "Belief Propagation: T1 with 4 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    q_a = DirichletCollection(
                        [
                            8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                            4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                            10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                        ]
                    )
                ),
                output = Categorical([0.33560986817109284, 0.33211844702810667, 0.3322716848008006])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.4, 0.3, 0.3]),
                    q_a = DirichletCollection(
                        [
                            19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                            19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                            20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3414528537163908, 0.33999747769720556, 0.3185496685864036])
            )
        ]
    end

    # Test T1 interface with 4 interfaces (BP with PointMass q_a)
    @testset "Belief Propagation: T1 with 4 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                                4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                                10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.348472379384837, 0.3413229091657237, 0.31020471144943934])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.4, 0.3, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                                19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                                20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.38575359948949073, 0.30857894946755476, 0.30566745104295456])
            )
        ]
    end

    # Test T2 interface with 4 interfaces (BP with DirichletCollection q_a)
    @testset "Belief Propagation: T2 with 4 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    q_a = DirichletCollection(
                        [
                            8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                            4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                            10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                        ]
                    )
                ),
                output = Categorical([0.338625179073202, 0.337082980142494, 0.3242918407843041])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    q_a = DirichletCollection(
                        [
                            19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                            19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                            20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3192292332473711, 0.32977701725750214, 0.35099374949512663])
            )
        ]
    end

    # Test T2 interface with 4 interfaces (BP with PointMass q_a)
    @testset "Belief Propagation: T2 with 4 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                                4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                                10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.3300037591966059, 0.3779066645185543, 0.29208957628483967])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                                19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                                20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.33546815449294726, 0.3245059133236415, 0.3400259321834113])
            )
        ]
    end

    # Test T1 interface with 5 interfaces (BP with DirichletCollection q_a)
    @testset "Belief Propagation: T1 with 5 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                            16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                            19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.33779166326287985, 0.32974470651939675, 0.3324636302177235])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.5, 0.2, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                            11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                            11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3232907245817735, 0.3235162570642591, 0.3531930183539675])
            )
        ]
    end

    # Test T1 interface with 5 interfaces (BP with PointMass q_a)
    @testset "Belief Propagation: T1 with 5 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = PointMass(
                        normalize!(
                            [
                                18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                                16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                                19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.34048365920174845, 0.3200594007157279, 0.33945694008252375])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.4, 0.3, 0.3]),
                    m_T3 = Categorical([0.5, 0.2, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                                11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                                11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.3191507064239812, 0.3234732446374377, 0.35737604893858116])
            )
        ]
    end

    # Test T2 interface with 5 interfaces (BP with DirichletCollection q_a)
    @testset "Belief Propagation: T2 with 5 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                            16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                            19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3349038229698072, 0.3323952220297803, 0.33270095500041247])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T3 = Categorical([0.5, 0.2, 0.3]),
                    q_a = DirichletCollection(
                        [
                            15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                            11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                            11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.33221680581853985, 0.32131725863865607, 0.346465935542804])
            )
        ]
    end

    # Test T2 interface with 5 interfaces (BP with PointMass q_a)
    @testset "Belief Propagation: T2 with 5 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = PointMass(
                        normalize!(
                            [
                                18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                                16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                                19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.3314510207078866, 0.3506351887208107, 0.31791379057130265])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T3 = Categorical([0.5, 0.2, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                                11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                                11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.31465933370261934, 0.3276568805887473, 0.3576837857086334])
            )
        ]
    end

    # Test T3 interface with 5 interfaces (BP with DirichletCollection q_a)
    @testset "Belief Propagation: T3 with 5 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T3, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T2 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                            16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                            19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3327791834414443, 0.33479029996811277, 0.332430516590443])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T2 = Categorical([0.5, 0.2, 0.3]),
                    q_a = DirichletCollection(
                        [
                            15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                            11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                            11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3405707102171213, 0.32860320985809627, 0.3308260799247824])
            )
        ]
    end

    # Test T3 interface with 5 interfaces (BP with PointMass q_a)
    @testset "Belief Propagation: T3 with 5 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T3, Marginalisation) [
            (
                input = (
                    m_out = Categorical([0.3, 0.4, 0.3]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T2 = Categorical([0.2, 0.3, 0.5]),
                    q_a = PointMass(
                        [
                            0.6666666666666666 0.25 0.17857142857142858; 0.25925925925925924 0.6666666666666666 0.17857142857142858; 0.07407407407407407 0.08333333333333333 0.6428571428571429;;; 0.8235294117647058 0.3 0.045454545454545456; 0.11764705882352941 0.43333333333333335 0.3181818181818182; 0.058823529411764705 0.26666666666666666 0.6363636363636364;;; 0.5454545454545454 0.14285714285714285 0.1; 0.2727272727272727 0.7857142857142857 0.2; 0.18181818181818182 0.07142857142857142 0.7;;;; 0.4827586206896552 0.1111111111111111 0.3125; 0.3448275862068966 0.6296296296296297 0.28125; 0.1724137931034483 0.25925925925925924 0.40625;;; 0.5652173913043478 0.3125 0.23809523809523808; 0.391304347826087 0.5625 0.19047619047619047; 0.043478260869565216 0.125 0.5714285714285714;;; 0.72 0.2 0.3333333333333333; 0.08 0.5714285714285714 0.25925925925925924; 0.2 0.22857142857142856 0.4074074074074074;;;; 0.5142857142857142 0.10714285714285714 0.2222222222222222; 0.2571428571428571 0.7142857142857143 0.25; 0.22857142857142856 0.17857142857142858 0.5277777777777778;;; 0.75 0.36 0.13333333333333333; 0.05 0.56 0.06666666666666667; 0.2 0.08 0.8;;; 0.6428571428571429 0.2 0.4166666666666667; 0.03571428571428571 0.72 0.08333333333333333; 0.32142857142857145 0.08 0.5;;;;;
                            0.5333333333333333 0.07692307692307693 0.043478260869565216; 0.16666666666666666 0.6923076923076923 0.34782608695652173; 0.3 0.23076923076923078 0.6086956521739131;;; 0.7727272727272727 0.20689655172413793 0.20689655172413793; 0.045454545454545456 0.6206896551724138 0.2413793103448276; 0.18181818181818182 0.1724137931034483 0.5517241379310345;;; 0.59375 0.27586206896551724 0.25; 0.125 0.3793103448275862 0.25; 0.28125 0.3448275862068966 0.5;;;; 0.7368421052631579 0.25 0.36363636363636365; 0.05263157894736842 0.6428571428571429 0.09090909090909091; 0.21052631578947367 0.10714285714285714 0.5454545454545454;;; 0.4838709677419355 0.14285714285714285 0.19047619047619047; 0.2903225806451613 0.5714285714285714 0.09523809523809523; 0.22580645161290322 0.2857142857142857 0.7142857142857143;;; 0.65 0.16666666666666666 0.23076923076923078; 0.3 0.5 0.15384615384615385; 0.05 0.3333333333333333 0.6153846153846154;;;; 0.5217391304347826 0.07407407407407407 0.043478260869565216; 0.13043478260869565 0.6666666666666666 0.30434782608695654; 0.34782608695652173 0.25925925925925924 0.6521739130434783;;; 0.7037037037037037 0.13043478260869565 0.15384615384615385; 0.25925925925925924 0.6086956521739131 0.3076923076923077; 0.037037037037037035 0.2608695652173913 0.5384615384615384;;; 0.7272727272727273 0.23529411764705882 0.2857142857142857; 0.22727272727272727 0.47058823529411764 0.32142857142857145; 0.045454545454545456 0.29411764705882354 0.39285714285714285;;;;;
                            0.7037037037037037 0.03333333333333333 0.2222222222222222; 0.1111111111111111 0.6666666666666666 0.3333333333333333; 0.18518518518518517 0.3 0.4444444444444444;;; 0.52 0.3157894736842105 0.03571428571428571; 0.36 0.631578947368421 0.25; 0.12 0.05263157894736842 0.7142857142857143;;; 0.5588235294117647 0.2777777777777778 0.26666666666666666; 0.17647058823529413 0.4444444444444444 0.2; 0.2647058823529412 0.2777777777777778 0.5333333333333333;;;; 0.5416666666666666 0.03571428571428571 0.125; 0.25 0.6428571428571429 0.25; 0.20833333333333334 0.32142857142857145 0.625;;; 0.5454545454545454 0.2857142857142857 0.22727272727272727; 0.24242424242424243 0.39285714285714285 0.18181818181818182; 0.21212121212121213 0.32142857142857145 0.5909090909090909;;; 0.42857142857142855 0.3333333333333333 0.2777777777777778; 0.2857142857142857 0.5833333333333334 0.2777777777777778; 0.2857142857142857 0.08333333333333333 0.4444444444444444;;;; 0.5 0.26666666666666666 0.29411764705882354; 0.17857142857142858 0.6 0.2647058823529412; 0.32142857142857145 0.13333333333333333 0.4411764705882353;;; 0.5555555555555556 0.3103448275862069 0.047619047619047616; 0.25925925925925924 0.41379310344827586 0.38095238095238093; 0.18518518518518517 0.27586206896551724 0.5714285714285714;;; 0.6451612903225806 0.11538461538461539 0.06666666666666667; 0.2903225806451613 0.5384615384615384 0.06666666666666667; 0.06451612903225806 0.34615384615384615 0.8666666666666667
                        ]
                    )
                ),
                output = Categorical([0.33284552594585337, 0.3347077171525566, 0.33244675690159])
            ),
            (
                input = (
                    m_out = Categorical([0.6, 0.3, 0.1]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T2 = Categorical([0.5, 0.2, 0.3]),
                    q_a = PointMass(
                        [
                            0.5555555555555556 0.16 0.28125; 0.37037037037037035 0.52 0.25; 0.07407407407407407 0.32 0.46875;;; 0.6666666666666666 0.058823529411764705 0.3333333333333333; 0.16666666666666666 0.8823529411764706 0.07407407407407407; 0.16666666666666666 0.058823529411764705 0.5925925925925926;;; 0.76 0.3 0.28125; 0.16 0.36666666666666664 0.21875; 0.08 0.3333333333333333 0.5;;;; 0.5135135135135135 0.1 0.12; 0.24324324324324326 0.5666666666666667 0.08; 0.24324324324324326 0.3333333333333333 0.8;;; 0.6060606060606061 0.041666666666666664 0.23529411764705882; 0.18181818181818182 0.6666666666666666 0.17647058823529413; 0.21212121212121213 0.2916666666666667 0.5882352941176471;;; 0.39285714285714285 0.2857142857142857 0.4; 0.35714285714285715 0.6071428571428571 0.04; 0.25 0.10714285714285714 0.56;;;; 0.46153846153846156 0.3125 0.17647058823529413; 0.2692307692307692 0.625 0.23529411764705882; 0.2692307692307692 0.0625 0.5882352941176471;;; 0.5142857142857142 0.26666666666666666 0.16; 0.22857142857142856 0.6666666666666666 0.28; 0.2571428571428571 0.06666666666666667 0.56;;; 0.6842105263157895 0.38461538461538464 0.12; 0.21052631578947367 0.4230769230769231 0.2; 0.10526315789473684 0.19230769230769232 0.68;;;;;
                            0.4782608695652174 0.15789473684210525 0.15384615384615385; 0.17391304347826086 0.5789473684210527 0.19230769230769232; 0.34782608695652173 0.2631578947368421 0.6538461538461539;;; 0.36666666666666664 0.2857142857142857 0.30434782608695654; 0.3333333333333333 0.39285714285714285 0.13043478260869565; 0.3 0.32142857142857145 0.5652173913043478;;; 0.7894736842105263 0.23529411764705882 0.19230769230769232; 0.10526315789473684 0.5294117647058824 0.23076923076923078; 0.10526315789473684 0.23529411764705882 0.5769230769230769;;;; 0.64 0.2962962962962963 0.15; 0.08 0.5555555555555556 0.2; 0.28 0.14814814814814814 0.65;;; 0.4782608695652174 0.17391304347826086 0.07407407407407407; 0.21739130434782608 0.782608695652174 0.3333333333333333; 0.30434782608695654 0.043478260869565216 0.5925925925925926;;; 0.6153846153846154 0.11538461538461539 0.32; 0.11538461538461539 0.5769230769230769 0.16; 0.2692307692307692 0.3076923076923077 0.52;;;; 0.5714285714285714 0.125 0.24; 0.35714285714285715 0.5 0.08; 0.07142857142857142 0.375 0.68;;; 0.5588235294117647 0.25925925925925924 0.21739130434782608; 0.20588235294117646 0.48148148148148145 0.17391304347826086; 0.23529411764705882 0.25925925925925924 0.6086956521739131;;; 0.48148148148148145 0.23076923076923078 0.34615384615384615; 0.25925925925925924 0.6923076923076923 0.23076923076923078; 0.25925925925925924 0.07692307692307693 0.4230769230769231;;;;;
                            0.39285714285714285 0.07692307692307693 0.3181818181818182; 0.32142857142857145 0.8461538461538461 0.18181818181818182; 0.2857142857142857 0.07692307692307693 0.5;;; 0.5217391304347826 0.2647058823529412 0.15; 0.17391304347826086 0.4411764705882353 0.05; 0.30434782608695654 0.29411764705882354 0.8;;; 0.5 0.2962962962962963 0.2962962962962963; 0.18181818181818182 0.6296296296296297 0.07407407407407407; 0.3181818181818182 0.07407407407407407 0.6296296296296297;;;; 0.3939393939393939 0.09090909090909091 0.3; 0.30303030303030304 0.8181818181818182 0.13333333333333333; 0.30303030303030304 0.09090909090909091 0.5666666666666667;;; 0.5555555555555556 0.3103448275862069 0.21739130434782608; 0.2777777777777778 0.5172413793103449 0.13043478260869565; 0.16666666666666666 0.1724137931034483 0.6521739130434783;;; 0.5142857142857142 0.2 0.11538461538461539; 0.2857142857142857 0.6 0.11538461538461539; 0.2 0.2 0.7692307692307693;;;; 0.8 0.2 0.3157894736842105; 0.1 0.5714285714285714 0.10526315789473684; 0.1 0.22857142857142856 0.5789473684210527;;; 0.5185185185185185 0.08333333333333333 0.13333333333333333; 0.1111111111111111 0.5416666666666666 0.13333333333333333; 0.37037037037037035 0.375 0.7333333333333333;;; 0.44 0.2608695652173913 0.05555555555555555; 0.4 0.5217391304347826 0.2222222222222222; 0.16 0.21739130434782608 0.7222222222222222
                        ]
                    )
                ),
                output = Categorical([0.33997124, 0.3288227, 0.33120605])
            )
        ]
    end
end
@testitem "rules:DiscreteTransition:T:Additional T-interface tests for structured VMP" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules, normalize!
    # Test T1 interface with 3 interfaces (BP with DirichletCollection q_a)
    @testset "Structured VMP: T1 with 3 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    q_a = DirichletCollection(
                        [
                            1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0;;;
                            10.0 11.0 12.0; 13.0 14.0 15.0; 16.0 17.0 18.0;;;
                            19.0 20.0 21.0; 22.0 23.0 24.0; 25.0 26.0 27.0
                        ]
                    )
                ),
                output = Categorical([0.3222497683237624, 0.33726688762463153, 0.340483344051606])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    q_a = DirichletCollection([
                        5.0 1.0 2.0; 3.0 8.0 4.0; 6.0 7.0 9.0;;;
                        2.0 4.0 6.0; 8.0 10.0 12.0; 14.0 16.0 18.0;;;
                        1.0 3.0 5.0; 7.0 9.0 11.0; 13.0 15.0 17.0
                    ])
                ),
                output = Categorical([0.38691253148106663, 0.30713613034182974, 0.3059513381771036])
            )
        ]
    end

    # Test T1 interface with 3 interfaces (BP with PointMass q_a)
    @testset "Structured VMP: T1 with 3 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0;;;
                                10.0 11.0 12.0; 13.0 14.0 15.0; 16.0 17.0 18.0;;;
                                19.0 20.0 21.0; 22.0 23.0 24.0; 25.0 26.0 27.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.12056737588652484, 0.3333333333333333, 0.546099290780142])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    q_a = PointMass(
                        normalize!(
                            [
                                5.0 1.0 2.0; 3.0 8.0 4.0; 6.0 7.0 9.0;;;
                                2.0 4.0 6.0; 8.0 10.0 12.0; 14.0 16.0 18.0;;;
                                1.0 3.0 5.0; 7.0 9.0 11.0; 13.0 15.0 17.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.2567049808429118, 0.39080459770114945, 0.35249042145593873])
            )
        ]
    end

    # Test T1 interface with 4 interfaces (BP with DirichletCollection q_a)
    @testset "Structured VMP: T1 with 4 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    q_a = DirichletCollection(
                        [
                            8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                            4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                            10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                        ]
                    )
                ),
                output = Categorical([0.3497555290286515, 0.3243332739931893, 0.3259111969781592])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.4, 0.3, 0.3]),
                    q_a = DirichletCollection(
                        [
                            19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                            19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                            20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.286528392833518, 0.37874041975160827, 0.33473118741487373])
            )
        ]
    end

    # Test T1 interface with 4 interfaces (BP with PointMass q_a)
    @testset "Structured VMP: T1 with 4 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                                4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                                10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.35081081081081084, 0.3389189189189189, 0.3102702702702703])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.4, 0.3, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                                19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                                20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.35682119205298013, 0.33536423841059604, 0.30781456953642383])
            )
        ]
    end

    # Test T2 interface with 4 interfaces (BP with DirichletCollection q_a)
    @testset "Structured VMP: T2 with 4 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    q_a = DirichletCollection(
                        [
                            8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                            4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                            10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                        ]
                    )
                ),
                output = Categorical([0.3849880269015263, 0.3451508297760113, 0.2698611433224625])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    q_a = DirichletCollection(
                        [
                            19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                            19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                            20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.2822442158041096, 0.35479077885708316, 0.36296500533880727])
            )
        ]
    end

    # Test T2 interface with 4 interfaces (BP with PointMass q_a)
    @testset "Structured VMP: T2 with 4 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                8.0 8.0 10.0; 3.0 2.0 3.0; 2.0 2.0 10.0;;; 5.0 2.0 8.0; 2.0 10.0 8.0; 9.0 6.0 6.0;;; 11.0 6.0 1.0; 3.0 8.0 4.0; 3.0 7.0 9.0;;;;
                                4.0 8.0 6.0; 8.0 5.0 6.0; 5.0 10.0 11.0;;; 11.0 2.0 10.0; 2.0 7.0 10.0; 7.0 9.0 11.0;;; 5.0 10.0 4.0; 3.0 7.0 9.0; 7.0 2.0 8.0;;;;
                                10.0 6.0 4.0; 10.0 11.0 5.0; 6.0 4.0 3.0;;; 9.0 9.0 2.0; 6.0 6.0 1.0; 5.0 4.0 5.0;;; 11.0 5.0 7.0; 6.0 3.0 3.0; 1.0 8.0 8.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.3681015452538632, 0.3736203090507726, 0.2582781456953642])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                19.0 7.0 3.0; 3.0 17.0 2.0; 9.0 9.0 12.0;;; 13.0 8.0 2.0; 6.0 16.0 7.0; 7.0 3.0 16.0;;; 15.0 5.0 1.0; 9.0 12.0 5.0; 9.0 10.0 14.0;;;;
                                19.0 6.0 3.0; 4.0 17.0 9.0; 1.0 8.0 18.0;;; 11.0 1.0 8.0; 9.0 13.0 4.0; 7.0 1.0 16.0;;; 20.0 8.0 1.0; 9.0 18.0 3.0; 1.0 5.0 14.0;;;;
                                20.0 9.0 8.0; 4.0 18.0 5.0; 4.0 6.0 11.0;;; 12.0 5.0 4.0; 8.0 16.0 9.0; 5.0 4.0 18.0;;; 17.0 1.0 10.0; 8.0 13.0 5.0; 5.0 1.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.31640931693274016, 0.343103899502748, 0.3404867835645119])
            )
        ]
    end

    # Test T1 interface with 5 interfaces (BP with DirichletCollection q_a)
    @testset "Structured VMP: T1 with 5 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                            16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                            19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.36870768331118214, 0.30633841980829635, 0.32495389688052134])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.5, 0.2, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                            11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                            11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.37257899898381897, 0.30786025080685453, 0.3195607502093266])
            )
        ]
    end

    # Test T1 interface with 5 interfaces (BP with PointMass q_a)
    @testset "Structured VMP: T1 with 5 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T1, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T2 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = PointMass(
                        normalize!(
                            [
                                18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                                16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                                19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.3682781916337425, 0.3036462888681123, 0.3280755194981452])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T2 = Categorical([0.4, 0.3, 0.3]),
                    m_T3 = Categorical([0.5, 0.2, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                                11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                                11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.3456193186527781, 0.3381040532699693, 0.3162766280772525])
            )
        ]
    end

    # Test T2 interface with 5 interfaces (BP with DirichletCollection q_a)
    @testset "Structured VMP: T2 with 5 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                            16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                            19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3479342603718732, 0.31997760011358223, 0.33208813951454447])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T3 = Categorical([0.5, 0.2, 0.3]),
                    q_a = DirichletCollection(
                        [
                            15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                            11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                            11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3312582126371244, 0.3473116701850784, 0.32143011717779724])
            )
        ]
    end

    # Test T2 interface with 5 interfaces (BP with PointMass q_a)
    @testset "Structured VMP: T2 with 5 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T2, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T3 = Categorical([0.2, 0.3, 0.5]),
                    q_a = PointMass(
                        normalize!(
                            [
                                18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                                16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                                19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.3307771289225438, 0.3462427003786177, 0.32298017069883844])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T3 = Categorical([0.5, 0.2, 0.3]),
                    q_a = PointMass(
                        normalize!(
                            [
                                15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                                11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                                11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                            ],
                            1
                        )
                    )
                ),
                output = Categorical([0.29589809194588856, 0.3530580581942895, 0.35104384985982195])
            )
        ]
    end

    # Test T3 interface with 5 interfaces (BP with DirichletCollection q_a)
    @testset "Structured VMP: T3 with 5 interfaces (DirichletCollection q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T3, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T2 = Categorical([0.2, 0.3, 0.5]),
                    q_a = DirichletCollection(
                        [
                            18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                            16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                            19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3279949804990311, 0.34665622524067496, 0.32534879426029395])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T2 = Categorical([0.5, 0.2, 0.3]),
                    q_a = DirichletCollection(
                        [
                            15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                            11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                            11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3381045653050833, 0.31357571033595166, 0.3483197243589649])
            )
        ]
    end

    # Test T3 interface with 5 interfaces (BP with PointMass q_a)
    @testset "Structured VMP: T3 with 5 interfaces (PointMass q_a)" begin
        @test_rules [check_type_promotion = true, extra_float_types = [Float64, Float32]] DiscreteTransition(:T3, Marginalisation) [
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.2, 0.5, 0.3]),
                    m_T1 = Categorical([0.1, 0.6, 0.3]),
                    m_T2 = Categorical([0.2, 0.3, 0.5]),
                    q_a = PointMass(
                        [
                            18.0 6.0 5.0; 7.0 16.0 5.0; 2.0 2.0 18.0;;; 14.0 9.0 1.0; 2.0 13.0 7.0; 1.0 8.0 14.0;;; 18.0 2.0 2.0; 9.0 11.0 4.0; 6.0 1.0 14.0;;;; 14.0 3.0 10.0; 10.0 17.0 9.0; 5.0 7.0 13.0;;; 13.0 10.0 5.0; 9.0 18.0 4.0; 1.0 4.0 12.0;;; 18.0 7.0 9.0; 2.0 20.0 7.0; 5.0 8.0 11.0;;;; 18.0 3.0 8.0; 9.0 20.0 9.0; 8.0 5.0 19.0;;; 15.0 9.0 2.0; 1.0 14.0 1.0; 4.0 2.0 12.0;;; 18.0 5.0 10.0; 1.0 18.0 2.0; 9.0 2.0 12.0;;;;;
                            16.0 2.0 1.0; 5.0 18.0 8.0; 9.0 6.0 14.0;;; 17.0 6.0 6.0; 1.0 18.0 7.0; 4.0 5.0 16.0;;; 19.0 8.0 9.0; 4.0 11.0 9.0; 9.0 10.0 18.0;;;; 14.0 7.0 8.0; 1.0 18.0 2.0; 4.0 3.0 12.0;;; 15.0 5.0 4.0; 9.0 20.0 2.0; 7.0 10.0 15.0;;; 13.0 5.0 6.0; 6.0 15.0 4.0; 1.0 10.0 16.0;;;; 12.0 2.0 1.0; 3.0 18.0 7.0; 8.0 7.0 15.0;;; 19.0 3.0 4.0; 7.0 14.0 8.0; 1.0 6.0 14.0;;; 16.0 8.0 8.0; 5.0 16.0 9.0; 1.0 10.0 11.0;;;;;
                            19.0 1.0 6.0; 3.0 20.0 9.0; 5.0 9.0 12.0;;; 13.0 6.0 1.0; 9.0 12.0 7.0; 3.0 1.0 20.0;;; 19.0 10.0 8.0; 6.0 16.0 6.0; 9.0 10.0 16.0;;;; 13.0 1.0 4.0; 6.0 18.0 8.0; 5.0 9.0 20.0;;; 18.0 8.0 5.0; 8.0 11.0 4.0; 7.0 9.0 13.0;;; 15.0 8.0 10.0; 10.0 14.0 10.0; 10.0 2.0 16.0;;;; 14.0 8.0 10.0; 5.0 18.0 9.0; 9.0 4.0 15.0;;; 15.0 9.0 1.0; 7.0 12.0 8.0; 5.0 8.0 12.0;;; 20.0 3.0 1.0; 9.0 14.0 1.0; 2.0 9.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.3196164859560503, 0.35845050030565295, 0.3219330137382968])
            ),
            (
                input = (
                    q_out = PointMass([0.0, 1.0, 0.0]),
                    m_in = Categorical([0.1, 0.7, 0.2]),
                    m_T1 = Categorical([0.4, 0.3, 0.3]),
                    m_T2 = Categorical([0.5, 0.2, 0.3]),
                    q_a = PointMass(
                        [
                            15.0 4.0 9.0; 10.0 13.0 8.0; 2.0 8.0 15.0;;; 20.0 1.0 9.0; 5.0 15.0 2.0; 5.0 1.0 16.0;;; 19.0 9.0 9.0; 4.0 11.0 7.0; 2.0 10.0 16.0;;;; 19.0 3.0 3.0; 9.0 17.0 2.0; 9.0 10.0 20.0;;; 20.0 1.0 8.0; 6.0 16.0 6.0; 7.0 7.0 20.0;;; 11.0 8.0 10.0; 10.0 17.0 1.0; 7.0 3.0 14.0;;;; 12.0 10.0 6.0; 7.0 20.0 8.0; 7.0 2.0 20.0;;; 18.0 8.0 4.0; 8.0 20.0 7.0; 9.0 2.0 14.0;;; 13.0 10.0 3.0; 4.0 11.0 5.0; 2.0 5.0 17.0;;;;;
                            11.0 3.0 4.0; 4.0 11.0 5.0; 8.0 5.0 17.0;;; 11.0 8.0 7.0; 10.0 11.0 3.0; 9.0 9.0 13.0;;; 15.0 8.0 5.0; 2.0 18.0 6.0; 2.0 8.0 15.0;;;; 16.0 8.0 3.0; 2.0 15.0 4.0; 7.0 4.0 13.0;;; 11.0 4.0 2.0; 5.0 18.0 9.0; 7.0 1.0 16.0;;; 16.0 3.0 8.0; 3.0 15.0 4.0; 7.0 8.0 13.0;;;; 16.0 3.0 6.0; 10.0 12.0 2.0; 2.0 9.0 17.0;;; 19.0 7.0 5.0; 7.0 13.0 4.0; 8.0 7.0 14.0;;; 13.0 6.0 9.0; 7.0 18.0 6.0; 7.0 2.0 11.0;;;;;
                            11.0 1.0 7.0; 9.0 11.0 4.0; 8.0 1.0 11.0;;; 12.0 9.0 3.0; 4.0 15.0 1.0; 7.0 10.0 16.0;;; 11.0 8.0 8.0; 4.0 17.0 2.0; 7.0 2.0 17.0;;;; 13.0 2.0 9.0; 10.0 18.0 4.0; 10.0 2.0 17.0;;; 20.0 9.0 5.0; 10.0 15.0 3.0; 6.0 5.0 15.0;;; 18.0 5.0 3.0; 10.0 15.0 3.0; 7.0 5.0 20.0;;;; 16.0 7.0 6.0; 2.0 20.0 2.0; 2.0 8.0 11.0;;; 14.0 2.0 2.0; 3.0 13.0 2.0; 10.0 9.0 11.0;;; 11.0 6.0 1.0; 10.0 12.0 4.0; 4.0 5.0 13.0
                        ]
                    )
                ),
                output = Categorical([0.35032390044323214, 0.31992271849073756, 0.32975338106603025])
            )
        ]
    end
end
