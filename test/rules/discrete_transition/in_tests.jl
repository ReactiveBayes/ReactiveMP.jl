
@testitem "rules:DiscreteTransition:in:Variational Bayes: (q_out::Any, q_a::DirichletCollection)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [
        (
            input = (q_out = PointMass([0.1, 0.4, 0.5]), q_a = DirichletCollection([0.2 0.1 0.7; 0.4 0.3 0.3; 0.1 0.6 0.3])),
            output = Categorical([0.03245589526827472, 0.5950912160314408, 0.37245288870028453])
        ),
        (input = (q_out = PointMass([0.0, 1.0, 0.0]), q_a = DirichletCollection(diageye(3) .+ tiny)), output = Categorical([0.0, 1.0, 0.0]))
    ]
end

@testitem "rules:DiscreteTransition:in:Variational Bayes: (q_out::Any, q_a::PointMass)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [(
        input = (q_out = PointMass([0.1, 0.4, 0.5]), q_a = PointMass([0.2 0.4 0.1; 0.1 0.3 0.6; 0.7 0.3 0.3])),
        output = Categorical([0.29943853278212923, 0.32603993277541166, 0.3745215344424593])
    )]
end

@testitem "rules:DiscreteTransition:in:Variational Bayes: (m_out::Categorical, q_a::DirichletCollection)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [
        (
            input = (m_out = Categorical([0.1, 0.4, 0.5]), q_a = DirichletCollection([0.2 0.1 0.7; 0.4 0.3 0.3; 0.1 0.6 0.3])),
            output = Categorical([0.27575594149188243, 0.5503434892576381, 0.17390056925047945])
        ),
        (
            input = (m_out = Categorical([0.3, 0.3, 0.4]), q_a = DirichletCollection(diageye(3) .+ 1)),
            output = Categorical([0.32119415576170857, 0.32119415576170857, 0.357611688476583])
        )
    ]
end

@testitem "rules:DiscreteTransition:in:Belief Propagation: (m_out::Categorical, q_a::PointMass)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [
        (
            input = (m_out = Categorical([0.1, 0.4, 0.5]), q_a = PointMass([0.2 0.4 0.1; 0.1 0.3 0.6; 0.7 0.3 0.3])),
            output = Categorical([0.36607142857142855, 0.27678571428571425, 0.35714285714285715])
        ),
        (input = (m_out = Categorical([1.0, 0.0, 0.0]), q_a = PointMass([0.0 0.0 0.0; 0.5 0.5 0.5; 0.5 0.5 0.5])), output = Categorical([1 / 3, 1 / 3, 1 / 3]))
    ]
end

@testitem "rules:DiscreteTransition:in:Belief Propagation: (m_out::Categorical, q_a::DirichletCollection, m_t1::Categorical)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [
        (
            input = (
                m_out = Categorical([0.06363608348699812, 0.4635487496635592, 0.47281516684944275]),
                q_a = DirichletCollection([3.0 2.0 9.0; 9.0 10.0 9.0; 4.0 6.0 3.0;;; 8.0 8.0 4.0; 9.0 1.0 6.0; 6.0 3.0 9.0;;; 3.0 7.0 8.0; 6.0 4.0 5.0; 6.0 1.0 10.0]),
                m_T1 = Categorical([0.5271858992772847, 0.07706246907875924, 0.3957516316439561])
            ),
            output = Categorical([0.37646565409395055, 0.3158727786171196, 0.30766156728892985])
        ),
        (
            input = (
                m_out = Categorical([0.5103858588726022, 0.42556134873724166, 0.06405279239015611]),
                q_a = DirichletCollection([9.0 7.0 4.0; 4.0 1.0 7.0; 2.0 2.0 10.0;;; 7.0 8.0 6.0; 6.0 7.0 2.0; 4.0 7.0 8.0;;; 4.0 3.0 2.0; 2.0 8.0 7.0; 10.0 6.0 7.0]),
                m_T1 = Categorical([0.6160127621173446, 0.2777189566460366, 0.10626828123661897])
            ),
            output = Categorical([0.3781041880107084, 0.36464328449743966, 0.2572525274918519])
        ),
        (
            input = (
                m_out = Categorical([0.4453670227558059, 0.2630035661457053, 0.2916294110984888]),
                q_a = DirichletCollection([7.0 1.0 1.0; 9.0 9.0 1.0; 7.0 2.0 3.0;;; 6.0 9.0 10.0; 4.0 9.0 1.0; 10.0 9.0 10.0;;; 4.0 7.0 9.0; 8.0 4.0 10.0; 9.0 3.0 6.0]),
                m_T1 = Categorical([0.15208943638244485, 0.6704322113566465, 0.17747835226090863])
            ),
            output = Categorical([0.3259798540726559, 0.3289172250099544, 0.3451029209173897])
        ),
        (
            input = (
                m_out = Categorical([0.15440187143581133, 0.8335492681493561, 0.012048860414832555]),
                q_a = DirichletCollection([3.0 4.0 4.0; 9.0 4.0 8.0; 8.0 1.0 8.0;;; 7.0 8.0 9.0; 9.0 4.0 1.0; 7.0 3.0 10.0;;; 7.0 1.0 1.0; 3.0 3.0 4.0; 2.0 3.0 2.0]),
                m_T1 = Categorical([0.38463636429622916, 0.4014483333701451, 0.21391530233362574])
            ),
            output = Categorical([0.36339604758350774, 0.35400347953287076, 0.28260047288362156])
        ),
        (
            input = (
                m_out = Categorical([0.4161210892223872, 0.4941277161962706, 0.0897511945813421]),
                q_a = DirichletCollection([6.0 3.0 5.0; 3.0 6.0 9.0; 8.0 6.0 6.0;;; 9.0 8.0 10.0; 7.0 2.0 8.0; 2.0 10.0 9.0;;; 10.0 4.0 6.0; 6.0 4.0 2.0; 4.0 2.0 3.0]),
                m_T1 = Categorical([0.2835337016406116, 0.26073332343890476, 0.45573297492048376])
            ),
            output = Categorical([0.35054919761788883, 0.3174728738964184, 0.3319779284856927])
        )
    ]
end

@testitem "rules:DiscreteTransition:in:Belief Propagation: (m_out::Categorical, q_a::DirichletCollection, q_T1::PointMass)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [
        (
            input = (
                m_out = Categorical([0.06363608348699812, 0.4635487496635592, 0.47281516684944275]),
                q_a = DirichletCollection([3.0 2.0 9.0; 9.0 10.0 9.0; 4.0 6.0 3.0;;; 8.0 8.0 4.0; 9.0 1.0 6.0; 6.0 3.0 9.0;;; 3.0 7.0 8.0; 6.0 4.0 5.0; 6.0 1.0 10.0]),
                q_T1 = PointMass([0.0, 1.0, 0.0])
            ),
            output = Categorical([0.36849007598005973, 0.19780688704566804, 0.4337030369742723])
        ),
        (
            input = (
                m_out = Categorical([0.5103858588726022, 0.42556134873724166, 0.06405279239015611]),
                q_a = DirichletCollection([9.0 7.0 4.0; 4.0 1.0 7.0; 2.0 2.0 10.0;;; 7.0 8.0 6.0; 6.0 7.0 2.0; 4.0 7.0 8.0;;; 4.0 3.0 2.0; 2.0 8.0 7.0; 10.0 6.0 7.0]),
                q_T1 = PointMass([1.0, 0.0, 0.0])
            ),
            output = Categorical([0.39107094432309364, 0.36786706856950363, 0.2410619871074027])
        ),
        (
            input = (
                m_out = Categorical([0.4453670227558059, 0.2630035661457053, 0.2916294110984888]),
                q_a = DirichletCollection([7.0 1.0 1.0; 9.0 9.0 1.0; 7.0 2.0 3.0;;; 6.0 9.0 10.0; 4.0 9.0 1.0; 10.0 9.0 10.0;;; 4.0 7.0 9.0; 8.0 4.0 10.0; 9.0 3.0 6.0]),
                q_T1 = PointMass([0.0, 1.0, 0.0])
            ),
            output = Categorical([0.32004731233203576, 0.32579383044679894, 0.3541588572211652])
        ),
        (
            input = (
                m_out = Categorical([0.15440187143581133, 0.8335492681493561, 0.012048860414832555]),
                q_a = DirichletCollection([3.0 4.0 4.0; 9.0 4.0 8.0; 8.0 1.0 8.0;;; 7.0 8.0 9.0; 9.0 4.0 1.0; 7.0 3.0 10.0;;; 7.0 1.0 1.0; 3.0 3.0 4.0; 2.0 3.0 2.0]),
                q_T1 = PointMass([0.0, 1.0, 0.0])
            ),
            output = Categorical([0.4880021962539044, 0.38138534037808547, 0.13061246336801005])
        ),
        (
            input = (
                m_out = Categorical([0.4161210892223872, 0.4941277161962706, 0.0897511945813421]),
                q_a = DirichletCollection([6.0 3.0 5.0; 3.0 6.0 9.0; 8.0 6.0 6.0;;; 9.0 8.0 10.0; 7.0 2.0 8.0; 2.0 10.0 9.0;;; 10.0 4.0 6.0; 6.0 4.0 2.0; 4.0 2.0 3.0]),
                q_T1 = PointMass([0.0, 1.0, 0.0])
            ),
            output = Categorical([0.4125925540187919, 0.2541841794751671, 0.333223266506041])
        )
    ]
end

@testitem "rules:DiscreteTransition:in:Belief Propagation: (m_out::Categorical, q_a::DirichletCollection, m_t1::Categorical, m_t2::Categorical)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [
        (
            input = (
                m_out = Categorical([0.08799332630703943, 0.29132551818215013, 0.6206811555108104]),
                q_a = DirichletCollection(
                    [
                        14.0 10.0 1.0; 6.0 8.0 1.0; 3.0 10.0 7.0;;; 14.0 3.0 3.0; 4.0 9.0 3.0; 5.0 5.0 14.0;;; 9.0 10.0 1.0; 3.0 7.0 4.0; 8.0 2.0 12.0;;;;
                        13.0 9.0 1.0; 9.0 7.0 8.0; 5.0 1.0 11.0;;; 8.0 7.0 4.0; 1.0 14.0 7.0; 4.0 10.0 6.0;;; 15.0 5.0 5.0; 7.0 6.0 5.0; 7.0 3.0 10.0;;;;
                        15.0 7.0 8.0; 5.0 10.0 9.0; 6.0 3.0 14.0;;; 7.0 1.0 6.0; 3.0 12.0 5.0; 3.0 5.0 9.0;;; 15.0 5.0 9.0; 9.0 12.0 10.0; 3.0 7.0 10.0;;;;
                        13.0 4.0 8.0; 4.0 8.0 2.0; 5.0 10.0 11.0;;; 15.0 4.0 8.0; 9.0 15.0 2.0; 5.0 2.0 12.0;;; 14.0 1.0 8.0; 10.0 6.0 5.0; 5.0 6.0 13.0
                    ]
                ),
                m_T1 = Categorical([0.11240998953463174, 0.5372891244719414, 0.35030088599342685]),
                m_T2 = Categorical([0.09240952821382971, 0.3184996197469503, 0.3995918737894391, 0.18949897824978093])
            ),
            output = Categorical([0.2516472953196383, 0.3420258883005958, 0.40632681637976575])
        ),
        (
            input = (
                m_out = Categorical([0.41399930903334414, 0.2569572285438312, 0.32904346242282473]),
                q_a = DirichletCollection(
                    [
                        15.0 4.0 4.0; 6.0 11.0 5.0; 1.0 1.0 14.0;;; 6.0 9.0 8.0; 10.0 10.0 5.0; 6.0 2.0 13.0;;; 13.0 2.0 7.0; 3.0 9.0 6.0; 5.0 5.0 7.0;;;;
                        7.0 2.0 9.0; 6.0 8.0 2.0; 6.0 4.0 12.0;;; 13.0 4.0 3.0; 1.0 10.0 2.0; 7.0 7.0 8.0;;; 9.0 9.0 4.0; 1.0 10.0 3.0; 4.0 4.0 12.0;;;;
                        13.0 5.0 5.0; 1.0 7.0 1.0; 7.0 5.0 11.0;;; 9.0 10.0 6.0; 6.0 13.0 1.0; 9.0 2.0 8.0;;; 13.0 9.0 4.0; 6.0 12.0 2.0; 10.0 1.0 13.0;;;;
                        9.0 6.0 8.0; 3.0 7.0 9.0; 8.0 4.0 11.0;;; 12.0 3.0 4.0; 2.0 11.0 9.0; 6.0 7.0 11.0;;; 13.0 6.0 10.0; 3.0 9.0 9.0; 10.0 10.0 6.0
                    ]
                ),
                m_T1 = Categorical([0.2712971200834005, 0.3827161804909996, 0.3459866994255999]),
                m_T2 = Categorical([0.2284278504147311, 0.1734009515489395, 0.1685400610240271, 0.4296311370123022])
            ),
            output = Categorical([0.3580424644840306, 0.31051652805186924, 0.3314410074641002])
        ),
        (
            input = (
                m_out = Categorical([0.28007415705382577, 0.362168131823555, 0.35775771112261917]),
                q_a = DirichletCollection(
                    [
                        12.0 9.0 1.0; 2.0 8.0 7.0; 10.0 1.0 13.0;;; 11.0 8.0 7.0; 10.0 14.0 7.0; 5.0 2.0 15.0;;; 8.0 4.0 4.0; 7.0 11.0 5.0; 4.0 10.0 6.0;;;;
                        14.0 3.0 7.0; 8.0 15.0 2.0; 5.0 8.0 15.0;;; 7.0 7.0 4.0; 6.0 11.0 2.0; 10.0 9.0 12.0;;; 11.0 7.0 4.0; 2.0 7.0 4.0; 1.0 1.0 15.0;;;;
                        13.0 7.0 5.0; 6.0 15.0 7.0; 9.0 5.0 14.0;;; 7.0 2.0 7.0; 1.0 7.0 2.0; 5.0 8.0 9.0;;; 13.0 5.0 2.0; 3.0 7.0 5.0; 9.0 10.0 14.0;;;;
                        14.0 10.0 3.0; 8.0 15.0 9.0; 8.0 2.0 13.0;;; 14.0 10.0 5.0; 2.0 11.0 4.0; 6.0 3.0 11.0;;; 9.0 8.0 10.0; 9.0 6.0 8.0; 5.0 3.0 6.0
                    ]
                ),
                m_T1 = Categorical([0.24450475682493267, 0.4963764838006123, 0.25911875937445494]),
                m_T2 = Categorical([0.013289905256330505, 0.03916840092344259, 0.6158904501712571, 0.3316512436489697])
            ),
            output = Categorical([0.31784517029280823, 0.34141019417661717, 0.3407446355305746])
        ),
        (
            input = (
                m_out = Categorical([0.231721871481526, 0.43974647264393085, 0.3285316558745432]),
                q_a = DirichletCollection(
                    [
                        11.0 8.0 5.0; 5.0 7.0 10.0; 2.0 1.0 11.0;;; 15.0 8.0 4.0; 8.0 12.0 3.0; 6.0 6.0 14.0;;; 13.0 10.0 8.0; 1.0 8.0 7.0; 8.0 8.0 14.0;;;;
                        8.0 4.0 8.0; 9.0 13.0 3.0; 8.0 2.0 7.0;;; 10.0 8.0 10.0; 5.0 11.0 8.0; 2.0 8.0 8.0;;; 10.0 3.0 2.0; 9.0 11.0 5.0; 10.0 4.0 15.0;;;;
                        10.0 7.0 9.0; 1.0 14.0 10.0; 10.0 5.0 15.0;;; 7.0 9.0 7.0; 5.0 14.0 1.0; 9.0 9.0 6.0;;; 15.0 7.0 3.0; 7.0 8.0 4.0; 2.0 2.0 14.0;;;;
                        14.0 7.0 2.0; 3.0 7.0 6.0; 4.0 9.0 15.0;;; 13.0 1.0 7.0; 3.0 12.0 4.0; 1.0 7.0 14.0;;; 7.0 7.0 3.0; 2.0 7.0 4.0; 8.0 9.0 10.0
                    ]
                ),
                m_T1 = Categorical([0.16173494859799328, 0.5444108919070189, 0.2938541594949879]),
                m_T2 = Categorical([0.3924160844603588, 0.34208347405766765, 0.0742389939993073, 0.19126144748266627])
            ),
            output = Categorical([0.305396640756791, 0.36076561844428456, 0.3338377407989245])
        ),
        (
            input = (
                m_out = Categorical([0.3438709572699468, 0.327896945058581, 0.3282320976714722]),
                q_a = DirichletCollection(
                    [
                        10.0 9.0 2.0; 6.0 8.0 10.0; 7.0 1.0 11.0;;; 8.0 5.0 2.0; 5.0 7.0 3.0; 8.0 1.0 8.0;;; 15.0 5.0 7.0; 4.0 13.0 6.0; 3.0 8.0 7.0;;;;
                        10.0 9.0 4.0; 6.0 12.0 10.0; 6.0 6.0 12.0;;; 12.0 8.0 3.0; 3.0 15.0 3.0; 6.0 3.0 10.0;;; 6.0 5.0 8.0; 8.0 6.0 10.0; 8.0 5.0 11.0;;;;
                        15.0 2.0 7.0; 9.0 14.0 3.0; 7.0 4.0 11.0;;; 15.0 5.0 8.0; 10.0 6.0 2.0; 1.0 8.0 12.0;;; 8.0 2.0 8.0; 3.0 12.0 6.0; 5.0 8.0 10.0;;;;
                        14.0 2.0 2.0; 10.0 10.0 2.0; 1.0 4.0 9.0;;; 10.0 1.0 7.0; 1.0 6.0 3.0; 1.0 10.0 13.0;;; 6.0 8.0 4.0; 4.0 9.0 3.0; 3.0 2.0 9.0
                    ]
                ),
                m_T1 = Categorical([0.08064616359815222, 0.3016652714857759, 0.6176885649160718]),
                m_T2 = Categorical([0.11248216922354308, 0.026994470113754852, 0.4375353107069617, 0.4229880499557404])
            ),
            output = Categorical([0.33437642195805395, 0.3321767052616158, 0.33344687278033025])
        )
    ]
end

@testitem "rules:DiscreteTransition:in:Structured Variational Message Passing: (m_out::Categorical, q_a::DirichletCollection, q_t1_t2::Contingency)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [(
        input = (
            m_out = Categorical([0.1, 0.1, 0.8]),
            q_a = DirichletCollection(
                [
                    20.0 8.0 5.0; 8.0 14.0 9.0; 3.0 6.0 12.0;;; 18.0 2.0 1.0; 6.0 19.0 10.0; 9.0 3.0 13.0;;; 14.0 6.0 4.0; 5.0 18.0 9.0; 2.0 3.0 12.0;;;;
                    13.0 1.0 6.0; 2.0 13.0 7.0; 7.0 4.0 13.0;;; 12.0 9.0 3.0; 1.0 19.0 2.0; 4.0 5.0 19.0;;; 17.0 4.0 1.0; 6.0 18.0 3.0; 8.0 10.0 11.0;;;;
                    18.0 1.0 1.0; 9.0 12.0 9.0; 3.0 3.0 12.0;;; 11.0 4.0 10.0; 10.0 15.0 1.0; 10.0 5.0 11.0;;; 13.0 6.0 7.0; 9.0 17.0 5.0; 3.0 7.0 20.0;;;;
                    20.0 4.0 6.0; 1.0 11.0 6.0; 2.0 1.0 12.0;;; 13.0 3.0 6.0; 2.0 16.0 7.0; 4.0 7.0 11.0;;; 13.0 5.0 2.0; 1.0 11.0 8.0; 4.0 1.0 16.0
                ]
            ),
            q_t1_t2 = Contingency([
                1.0 4.0 7.0 10.0
                2.0 5.0 8.0 11.0
                3.0 6.0 9.0 12.0
            ])
        ),
        output = Categorical([0.23238619977733496, 0.20664604788441424, 0.5609677523382509])
    )]
end

@testitem "rules:DiscreteTransition:in:Structured VMP: Higher orders (q_out::Pointmass, q_a::DirichletCollection, m_T*::Categorical)" begin
    using ReactiveMP, BayesBase, Random, ExponentialFamily, Distributions

    import ReactiveMP: @test_rules
    @test_rules [check_type_promotion = false] DiscreteTransition(:in, Marginalisation) [
        (
            input = (
                q_out = PointMass([0.0, 1.0, 0.0]),
                q_a = DirichletCollection(
                    [
                        3.0 4.0 1.0; 9.0 2.0 10.0; 6.0 1.0 3.0;;; 4.0 8.0 7.0; 2.0 3.0 10.0; 6.0 10.0 8.0;;; 8.0 3.0 5.0; 10.0 10.0 4.0; 10.0 10.0 10.0;;;; 9.0 2.0 1.0; 5.0 9.0 3.0; 6.0 3.0 6.0;;; 10.0 1.0 1.0; 6.0 5.0 3.0; 7.0 5.0 11.0;;; 5.0 3.0 6.0; 10.0 10.0 9.0; 6.0 6.0 9.0;;;; 6.0 1.0 4.0; 10.0 6.0 6.0; 10.0 2.0 3.0;;; 6.0 6.0 5.0; 3.0 6.0 2.0; 6.0 6.0 5.0;;; 6.0 3.0 4.0; 10.0 8.0 10.0; 10.0 2.0 6.0;;;;;
                        8.0 2.0 6.0; 9.0 11.0 4.0; 4.0 2.0 9.0;;; 8.0 3.0 5.0; 10.0 9.0 9.0; 7.0 4.0 7.0;;; 2.0 3.0 4.0; 6.0 4.0 9.0; 7.0 4.0 4.0;;;; 10.0 6.0 3.0; 4.0 10.0 4.0; 5.0 6.0 10.0;;; 9.0 4.0 8.0; 5.0 9.0 5.0; 10.0 10.0 8.0;;; 9.0 1.0 1.0; 6.0 2.0 6.0; 1.0 9.0 7.0;;;; 3.0 6.0 1.0; 6.0 7.0 7.0; 4.0 9.0 10.0;;; 10.0 7.0 2.0; 6.0 10.0 1.0; 6.0 6.0 8.0;;; 10.0 7.0 5.0; 4.0 7.0 6.0; 8.0 6.0 4.0;;;;;
                        8.0 7.0 2.0; 4.0 8.0 1.0; 5.0 9.0 10.0;;; 2.0 2.0 2.0; 5.0 8.0 1.0; 3.0 3.0 7.0;;; 7.0 4.0 6.0; 3.0 11.0 4.0; 3.0 8.0 11.0;;;; 6.0 3.0 8.0; 10.0 11.0 4.0; 3.0 6.0 11.0;;; 10.0 8.0 3.0; 1.0 11.0 7.0; 6.0 7.0 2.0;;; 5.0 2.0 1.0; 8.0 2.0 3.0; 8.0 6.0 2.0;;;; 3.0 5.0 10.0; 1.0 6.0 10.0; 4.0 3.0 3.0;;; 5.0 4.0 1.0; 2.0 4.0 5.0; 7.0 9.0 11.0;;; 9.0 5.0 3.0; 2.0 9.0 5.0; 6.0 7.0 11.0
                    ]
                ),
                m_T1 = Categorical([0.2, 0.5, 0.3]),
                m_T2 = Categorical([0.7, 0.2, 0.1]),
                m_T3 = Categorical([0.1, 0.8, 0.1])
            ),
            output = Categorical([0.2989502120797019, 0.3991819161930773, 0.30186787172722096])
        ),
        (
            input = (
                q_out = PointMass([0.0, 1.0, 0.0]),
                q_a = DirichletCollection(
                    [
                        7.0 4.0 5.0; 4.0 9.0 4.0; 7.0 9.0 3.0;;; 8.0 10.0 3.0; 4.0 8.0 6.0; 8.0 6.0 8.0;;; 10.0 4.0 5.0; 4.0 6.0 1.0; 5.0 5.0 5.0;;;; 8.0 2.0 3.0; 2.0 4.0 2.0; 6.0 8.0 4.0;;; 2.0 5.0 3.0; 10.0 4.0 7.0; 1.0 8.0 4.0;;; 3.0 6.0 2.0; 6.0 7.0 3.0; 1.0 3.0 4.0;;;; 8.0 7.0 3.0; 6.0 8.0 10.0; 5.0 7.0 9.0;;; 7.0 2.0 4.0; 5.0 7.0 10.0; 8.0 10.0 5.0;;; 5.0 7.0 9.0; 2.0 3.0 10.0; 7.0 7.0 8.0;;;;; 7.0 9.0 1.0; 2.0 3.0 5.0; 8.0 5.0 2.0;;; 2.0 2.0 3.0; 1.0 5.0 10.0; 7.0 1.0 4.0;;; 7.0 9.0 5.0; 5.0 7.0 6.0; 4.0 2.0 5.0;;;; 8.0 5.0 8.0; 5.0 5.0 6.0; 5.0 8.0 6.0;;; 8.0 4.0 9.0; 3.0 5.0 3.0; 10.0 7.0 11.0;;; 9.0 4.0 3.0; 10.0 7.0 9.0; 10.0 8.0 3.0;;;; 10.0 1.0 2.0; 7.0 2.0 2.0; 4.0 6.0 3.0;;; 3.0 1.0 7.0; 1.0 3.0 4.0; 6.0 7.0 7.0;;; 2.0 10.0 1.0; 10.0 3.0 6.0; 7.0 9.0 11.0;;;;; 3.0 9.0 10.0; 6.0 4.0 4.0; 9.0 1.0 6.0;;; 7.0 7.0 9.0; 2.0 2.0 4.0; 2.0 7.0 7.0;;; 8.0 2.0 7.0; 7.0 6.0 3.0; 6.0 1.0 3.0;;;; 3.0 9.0 4.0; 10.0 6.0 1.0; 10.0 5.0 9.0;;; 6.0 8.0 8.0; 10.0 9.0 6.0; 10.0 10.0 10.0;;; 4.0 5.0 7.0; 9.0 8.0 1.0; 3.0 5.0 2.0;;;; 9.0 6.0 3.0; 2.0 9.0 6.0; 2.0 7.0 10.0;;; 2.0 7.0 8.0; 5.0 7.0 3.0; 3.0 1.0 7.0;;; 6.0 6.0 5.0; 8.0 11.0 1.0; 3.0 2.0 5.0;;;;;;
                        10.0 1.0 8.0; 10.0 11.0 7.0; 1.0 2.0 6.0;;; 10.0 3.0 8.0; 6.0 10.0 4.0; 3.0 8.0 8.0;;; 10.0 1.0 10.0; 9.0 3.0 1.0; 3.0 6.0 7.0;;;; 11.0 5.0 7.0; 10.0 6.0 4.0; 4.0 1.0 2.0;;; 7.0 1.0 4.0; 9.0 6.0 1.0; 4.0 6.0 8.0;;; 3.0 5.0 8.0; 10.0 7.0 8.0; 6.0 5.0 2.0;;;; 10.0 2.0 1.0; 6.0 10.0 9.0; 9.0 2.0 11.0;;; 10.0 5.0 10.0; 6.0 7.0 10.0; 9.0 2.0 4.0;;; 9.0 10.0 6.0; 5.0 8.0 7.0; 4.0 9.0 9.0;;;;; 10.0 6.0 6.0; 10.0 7.0 9.0; 3.0 3.0 2.0;;; 6.0 7.0 5.0; 7.0 4.0 3.0; 8.0 8.0 4.0;;; 3.0 6.0 10.0; 5.0 10.0 5.0; 7.0 1.0 5.0;;;; 5.0 6.0 8.0; 6.0 6.0 7.0; 2.0 7.0 10.0;;; 9.0 2.0 3.0; 8.0 5.0 8.0; 9.0 9.0 9.0;;; 3.0 10.0 3.0; 10.0 4.0 9.0; 10.0 5.0 7.0;;;; 2.0 4.0 8.0; 4.0 2.0 7.0; 2.0 3.0 10.0;;; 8.0 9.0 2.0; 7.0 5.0 9.0; 10.0 5.0 11.0;;; 11.0 9.0 1.0; 6.0 10.0 6.0; 7.0 8.0 9.0;;;;; 3.0 6.0 8.0; 10.0 7.0 8.0; 3.0 2.0 10.0;;; 3.0 9.0 7.0; 1.0 3.0 9.0; 6.0 4.0 4.0;;; 9.0 8.0 6.0; 3.0 5.0 4.0; 5.0 4.0 4.0;;;; 5.0 10.0 7.0; 1.0 3.0 9.0; 3.0 10.0 3.0;;; 4.0 3.0 5.0; 4.0 2.0 1.0; 8.0 6.0 7.0;;; 9.0 2.0 10.0; 7.0 5.0 6.0; 2.0 6.0 5.0;;;; 9.0 7.0 2.0; 8.0 9.0 3.0; 3.0 9.0 3.0;;; 11.0 3.0 6.0; 7.0 7.0 8.0; 8.0 4.0 3.0;;; 9.0 8.0 1.0; 5.0 9.0 9.0; 5.0 5.0 3.0;;;;;;
                        6.0 3.0 1.0; 1.0 9.0 3.0; 7.0 7.0 4.0;;; 3.0 2.0 10.0; 8.0 5.0 10.0; 9.0 2.0 10.0;;; 6.0 10.0 6.0; 3.0 10.0 8.0; 8.0 10.0 4.0;;;; 4.0 7.0 7.0; 1.0 3.0 6.0; 6.0 10.0 2.0;;; 10.0 1.0 9.0; 7.0 9.0 7.0; 3.0 5.0 10.0;;; 5.0 10.0 3.0; 4.0 8.0 4.0; 7.0 7.0 7.0;;;; 9.0 8.0 8.0; 8.0 5.0 3.0; 10.0 10.0 10.0;;; 9.0 3.0 10.0; 2.0 10.0 3.0; 8.0 1.0 11.0;;; 5.0 4.0 6.0; 5.0 8.0 9.0; 1.0 4.0 2.0;;;;; 2.0 5.0 2.0; 6.0 11.0 9.0; 3.0 6.0 3.0;;; 2.0 1.0 8.0; 1.0 8.0 6.0; 9.0 10.0 4.0;;; 8.0 7.0 1.0; 5.0 10.0 9.0; 9.0 8.0 5.0;;;; 4.0 5.0 9.0; 5.0 3.0 3.0; 9.0 5.0 8.0;;; 8.0 6.0 3.0; 3.0 8.0 1.0; 9.0 5.0 4.0;;; 4.0 4.0 7.0; 10.0 5.0 6.0; 6.0 4.0 10.0;;;; 9.0 5.0 9.0; 9.0 3.0 8.0; 1.0 10.0 11.0;;; 10.0 9.0 3.0; 4.0 2.0 1.0; 3.0 8.0 3.0;;; 6.0 6.0 6.0; 4.0 9.0 4.0; 10.0 1.0 5.0;;;;; 11.0 5.0 6.0; 8.0 8.0 1.0; 6.0 10.0 4.0;;; 2.0 4.0 1.0; 4.0 9.0 8.0; 4.0 10.0 10.0;;; 10.0 4.0 8.0; 1.0 9.0 6.0; 5.0 4.0 3.0;;;; 2.0 7.0 8.0; 7.0 2.0 8.0; 4.0 3.0 3.0;;; 7.0 5.0 10.0; 4.0 10.0 1.0; 2.0 9.0 3.0;;; 8.0 1.0 2.0; 7.0 7.0 10.0; 3.0 8.0 9.0;;;; 8.0 4.0 8.0; 5.0 7.0 8.0; 6.0 8.0 7.0;;; 4.0 8.0 1.0; 3.0 3.0 6.0; 6.0 4.0 6.0;;; 11.0 2.0 4.0; 7.0 6.0 9.0; 8.0 6.0 8.0
                    ]
                ),
                m_T1 = Categorical([0.2, 0.5, 0.3]),
                m_T2 = Categorical([0.7, 0.2, 0.1]),
                m_T3 = Categorical([0.1, 0.8, 0.1]),
                m_T4 = Categorical([0.9, 0.1, 0.0])
            ),
            output = Categorical([0.20726805478723248, 0.38724745883080014, 0.4054844863819673])
        ),
        (
            input = (
                q_out = PointMass([0.0, 1.0, 0.0]),
                q_a = DirichletCollection(
                    [
                        6.0 5.0 7.0; 8.0 10.0 1.0; 5.0 9.0 3.0;;; 9.0 4.0 3.0; 1.0 7.0 3.0; 7.0 10.0 3.0;;; 11.0 2.0 3.0; 8.0 9.0 1.0; 10.0 6.0 2.0;;;; 10.0 10.0 8.0; 7.0 8.0 6.0; 5.0 1.0 4.0;;; 7.0 8.0 1.0; 9.0 2.0 7.0; 8.0 8.0 8.0;;; 2.0 4.0 2.0; 9.0 10.0 3.0; 8.0 4.0 2.0;;;; 11.0 6.0 1.0; 5.0 2.0 2.0; 10.0 5.0 5.0;;; 2.0 9.0 9.0; 4.0 2.0 5.0; 6.0 5.0 2.0;;; 2.0 6.0 9.0; 2.0 4.0 6.0; 1.0 2.0 5.0;;;;; 10.0 5.0 6.0; 5.0 2.0 2.0; 10.0 6.0 7.0;;; 6.0 4.0 6.0; 8.0 7.0 7.0; 5.0 9.0 4.0;;; 2.0 9.0 9.0; 10.0 2.0 10.0; 1.0 5.0 5.0;;;; 5.0 4.0 3.0; 1.0 6.0 1.0; 4.0 6.0 11.0;;; 10.0 6.0 5.0; 6.0 10.0 3.0; 2.0 3.0 7.0;;; 6.0 7.0 8.0; 9.0 3.0 4.0; 7.0 1.0 9.0;;;; 10.0 6.0 9.0; 1.0 6.0 6.0; 3.0 10.0 4.0;;; 3.0 6.0 2.0; 2.0 10.0 5.0; 4.0 10.0 4.0;;; 2.0 4.0 10.0; 3.0 5.0 6.0; 3.0 1.0 7.0;;;;; 2.0 9.0 3.0; 6.0 2.0 9.0; 4.0 9.0 7.0;;; 2.0 7.0 2.0; 1.0 7.0 4.0; 5.0 10.0 2.0;;; 6.0 5.0 8.0; 5.0 5.0 3.0; 5.0 8.0 9.0;;;; 3.0 1.0 3.0; 10.0 11.0 9.0; 4.0 10.0 6.0;;; 6.0 8.0 8.0; 6.0 2.0 4.0; 9.0 10.0 6.0;;; 9.0 8.0 6.0; 2.0 2.0 2.0; 6.0 5.0 2.0;;;; 9.0 1.0 10.0; 2.0 10.0 7.0; 8.0 2.0 6.0;;; 5.0 4.0 2.0; 3.0 2.0 4.0; 6.0 3.0 9.0;;; 7.0 8.0 6.0; 6.0 10.0 3.0; 9.0 6.0 7.0;;;;;; 8.0 6.0 8.0; 3.0 6.0 8.0; 2.0 10.0 9.0;;; 10.0 6.0 8.0; 10.0 4.0 6.0; 5.0 3.0 5.0;;; 6.0 2.0 2.0; 10.0 7.0 6.0; 4.0 8.0 9.0;;;; 4.0 4.0 3.0; 4.0 3.0 2.0; 9.0 1.0 5.0;;; 11.0 4.0 4.0; 8.0 11.0 6.0; 3.0 10.0 10.0;;; 3.0 1.0 5.0; 4.0 2.0 2.0; 8.0 9.0 7.0;;;; 3.0 4.0 5.0; 8.0 7.0 8.0; 4.0 5.0 2.0;;; 4.0 4.0 8.0; 10.0 10.0 2.0; 7.0 5.0 11.0;;; 2.0 5.0 8.0; 3.0 5.0 4.0; 9.0 4.0 3.0;;;;; 6.0 10.0 7.0; 2.0 7.0 2.0; 5.0 4.0 2.0;;; 10.0 10.0 2.0; 2.0 10.0 4.0; 4.0 3.0 10.0;;; 3.0 3.0 1.0; 9.0 2.0 3.0; 2.0 2.0 8.0;;;; 8.0 3.0 5.0; 1.0 10.0 6.0; 7.0 1.0 4.0;;; 6.0 1.0 9.0; 7.0 6.0 10.0; 9.0 4.0 9.0;;; 11.0 6.0 5.0; 4.0 9.0 7.0; 3.0 2.0 10.0;;;; 6.0 5.0 5.0; 9.0 9.0 9.0; 4.0 10.0 10.0;;; 7.0 7.0 4.0; 6.0 3.0 9.0; 6.0 4.0 2.0;;; 6.0 9.0 9.0; 8.0 11.0 7.0; 5.0 10.0 5.0;;;;; 7.0 9.0 5.0; 8.0 3.0 6.0; 6.0 9.0 3.0;;; 9.0 5.0 10.0; 8.0 5.0 10.0; 10.0 4.0 4.0;;; 10.0 2.0 4.0; 3.0 6.0 5.0; 7.0 9.0 8.0;;;; 4.0 6.0 2.0; 1.0 3.0 8.0; 3.0 7.0 4.0;;; 2.0 7.0 6.0; 8.0 8.0 1.0; 1.0 2.0 7.0;;; 5.0 8.0 3.0; 2.0 5.0 10.0; 3.0 7.0 6.0;;;; 11.0 10.0 7.0; 2.0 8.0 7.0; 3.0 3.0 10.0;;; 2.0 10.0 2.0; 8.0 4.0 3.0; 8.0 2.0 11.0;;; 4.0 5.0 8.0; 3.0 3.0 6.0; 9.0 2.0 5.0;;;;;; 7.0 8.0 2.0; 1.0 5.0 7.0; 2.0 3.0 5.0;;; 9.0 7.0 8.0; 1.0 8.0 7.0; 4.0 1.0 8.0;;; 10.0 8.0 10.0; 1.0 9.0 1.0; 10.0 4.0 5.0;;;; 9.0 6.0 9.0; 10.0 5.0 8.0; 4.0 9.0 7.0;;; 11.0 2.0 1.0; 8.0 7.0 5.0; 7.0 9.0 4.0;;; 8.0 1.0 4.0; 8.0 5.0 3.0; 6.0 1.0 4.0;;;; 11.0 10.0 4.0; 10.0 9.0 2.0; 4.0 10.0 10.0;;; 11.0 4.0 7.0; 9.0 4.0 10.0; 3.0 7.0 2.0;;; 10.0 5.0 10.0; 9.0 7.0 10.0; 7.0 8.0 10.0;;;;; 6.0 2.0 7.0; 10.0 6.0 3.0; 7.0 3.0 11.0;;; 3.0 9.0 1.0; 6.0 8.0 8.0; 1.0 1.0 8.0;;; 10.0 1.0 6.0; 3.0 11.0 1.0; 4.0 8.0 8.0;;;; 5.0 5.0 2.0; 9.0 2.0 2.0; 7.0 6.0 11.0;;; 10.0 9.0 4.0; 7.0 9.0 6.0; 5.0 1.0 11.0;;; 5.0 8.0 7.0; 2.0 2.0 4.0; 8.0 4.0 11.0;;;; 4.0 9.0 7.0; 4.0 4.0 10.0; 6.0 5.0 2.0;;; 5.0 9.0 5.0; 6.0 10.0 6.0; 3.0 7.0 2.0;;; 6.0 3.0 2.0; 8.0 6.0 10.0; 9.0 10.0 10.0;;;;; 6.0 7.0 5.0; 6.0 4.0 8.0; 2.0 10.0 6.0;;; 7.0 5.0 5.0; 9.0 7.0 1.0; 1.0 6.0 5.0;;; 2.0 7.0 10.0; 5.0 5.0 3.0; 1.0 1.0 11.0;;;; 5.0 10.0 8.0; 1.0 4.0 7.0; 7.0 10.0 2.0;;; 7.0 6.0 9.0; 10.0 10.0 7.0; 5.0 1.0 9.0;;; 5.0 2.0 7.0; 3.0 9.0 10.0; 4.0 10.0 5.0;;;; 10.0 1.0 7.0; 8.0 6.0 7.0; 9.0 6.0 9.0;;; 8.0 10.0 6.0; 1.0 7.0 5.0; 1.0 6.0 6.0;;; 7.0 9.0 9.0; 7.0 2.0 8.0; 5.0 5.0 6.0;;;;;;;
                        4.0 5.0 4.0; 4.0 9.0 7.0; 6.0 3.0 11.0;;; 11.0 4.0 1.0; 3.0 9.0 4.0; 6.0 2.0 10.0;;; 10.0 6.0 4.0; 10.0 9.0 7.0; 6.0 5.0 7.0;;;; 5.0 9.0 6.0; 4.0 7.0 6.0; 9.0 6.0 8.0;;; 6.0 1.0 2.0; 10.0 2.0 9.0; 9.0 8.0 10.0;;; 10.0 8.0 9.0; 7.0 8.0 6.0; 10.0 5.0 10.0;;;; 7.0 8.0 5.0; 7.0 4.0 10.0; 4.0 1.0 5.0;;; 9.0 2.0 10.0; 2.0 9.0 5.0; 9.0 2.0 4.0;;; 9.0 9.0 9.0; 6.0 11.0 6.0; 6.0 8.0 5.0;;;;; 10.0 8.0 2.0; 10.0 7.0 1.0; 9.0 1.0 2.0;;; 9.0 3.0 5.0; 10.0 8.0 10.0; 4.0 10.0 7.0;;; 11.0 8.0 5.0; 6.0 11.0 6.0; 5.0 6.0 9.0;;;; 9.0 9.0 3.0; 5.0 6.0 6.0; 3.0 10.0 5.0;;; 4.0 7.0 2.0; 10.0 5.0 3.0; 3.0 4.0 10.0;;; 11.0 1.0 2.0; 10.0 7.0 2.0; 8.0 10.0 7.0;;;; 7.0 10.0 8.0; 6.0 6.0 6.0; 1.0 10.0 11.0;;; 2.0 4.0 9.0; 9.0 11.0 8.0; 3.0 9.0 6.0;;; 5.0 6.0 5.0; 1.0 2.0 6.0; 10.0 2.0 10.0;;;;; 4.0 10.0 1.0; 2.0 4.0 7.0; 4.0 8.0 11.0;;; 7.0 6.0 10.0; 9.0 6.0 6.0; 3.0 8.0 11.0;;; 9.0 9.0 10.0; 8.0 10.0 8.0; 7.0 7.0 4.0;;;; 2.0 6.0 8.0; 7.0 8.0 2.0; 6.0 7.0 4.0;;; 10.0 5.0 4.0; 1.0 11.0 3.0; 2.0 1.0 5.0;;; 3.0 8.0 3.0; 2.0 4.0 10.0; 7.0 4.0 3.0;;;; 9.0 5.0 9.0; 9.0 10.0 3.0; 4.0 4.0 5.0;;; 4.0 9.0 5.0; 1.0 11.0 5.0; 9.0 9.0 5.0;;; 8.0 7.0 1.0; 9.0 10.0 9.0; 2.0 1.0 4.0;;;;;; 11.0 3.0 8.0; 9.0 4.0 5.0; 1.0 5.0 11.0;;; 7.0 3.0 10.0; 1.0 4.0 8.0; 10.0 4.0 5.0;;; 2.0 8.0 1.0; 9.0 8.0 9.0; 2.0 9.0 3.0;;;; 3.0 9.0 2.0; 9.0 8.0 6.0; 2.0 7.0 3.0;;; 2.0 4.0 7.0; 2.0 8.0 5.0; 8.0 3.0 6.0;;; 4.0 5.0 9.0; 2.0 8.0 1.0; 6.0 5.0 10.0;;;; 3.0 9.0 3.0; 3.0 10.0 5.0; 7.0 8.0 7.0;;; 8.0 9.0 7.0; 10.0 6.0 7.0; 8.0 4.0 5.0;;; 6.0 5.0 6.0; 9.0 3.0 7.0; 6.0 3.0 2.0;;;;; 8.0 4.0 7.0; 10.0 6.0 3.0; 5.0 7.0 4.0;;; 10.0 3.0 5.0; 1.0 3.0 2.0; 10.0 3.0 9.0;;; 6.0 8.0 9.0; 10.0 5.0 9.0; 9.0 6.0 3.0;;;; 6.0 6.0 3.0; 4.0 4.0 4.0; 4.0 4.0 10.0;;; 6.0 4.0 5.0; 9.0 2.0 1.0; 7.0 6.0 8.0;;; 10.0 5.0 6.0; 3.0 6.0 6.0; 4.0 3.0 4.0;;;; 4.0 8.0 3.0; 3.0 8.0 1.0; 7.0 7.0 4.0;;; 9.0 10.0 3.0; 5.0 5.0 7.0; 6.0 3.0 2.0;;; 4.0 8.0 10.0; 6.0 3.0 5.0; 1.0 5.0 4.0;;;;; 9.0 9.0 1.0; 1.0 3.0 9.0; 6.0 7.0 5.0;;; 3.0 2.0 4.0; 3.0 5.0 9.0; 2.0 9.0 7.0;;; 8.0 7.0 8.0; 8.0 11.0 5.0; 10.0 3.0 8.0;;;; 6.0 3.0 10.0; 1.0 10.0 2.0; 1.0 5.0 10.0;;; 2.0 7.0 2.0; 3.0 3.0 1.0; 6.0 10.0 6.0;;; 6.0 3.0 6.0; 2.0 5.0 9.0; 8.0 4.0 3.0;;;; 8.0 5.0 9.0; 8.0 5.0 6.0; 1.0 1.0 8.0;;; 5.0 5.0 6.0; 9.0 4.0 7.0; 10.0 5.0 5.0;;; 11.0 3.0 8.0; 10.0 5.0 2.0; 8.0 5.0 5.0;;;;;; 2.0 3.0 7.0; 6.0 8.0 7.0; 10.0 3.0 3.0;;; 10.0 9.0 5.0; 5.0 2.0 10.0; 4.0 1.0 6.0;;; 4.0 4.0 4.0; 8.0 11.0 3.0; 1.0 9.0 5.0;;;; 3.0 3.0 2.0; 7.0 3.0 4.0; 1.0 5.0 8.0;;; 3.0 3.0 3.0; 6.0 4.0 1.0; 7.0 4.0 5.0;;; 10.0 3.0 8.0; 2.0 2.0 10.0; 9.0 10.0 7.0;;;; 10.0 4.0 1.0; 10.0 8.0 8.0; 4.0 10.0 8.0;;; 3.0 1.0 1.0; 1.0 6.0 5.0; 10.0 6.0 3.0;;; 2.0 8.0 2.0; 6.0 9.0 3.0; 10.0 2.0 5.0;;;;; 8.0 6.0 10.0; 3.0 6.0 9.0; 7.0 9.0 4.0;;; 7.0 6.0 7.0; 9.0 9.0 6.0; 9.0 10.0 9.0;;; 7.0 1.0 6.0; 7.0 8.0 10.0; 7.0 4.0 9.0;;;; 5.0 7.0 3.0; 1.0 8.0 6.0; 3.0 5.0 8.0;;; 6.0 8.0 9.0; 5.0 5.0 1.0; 6.0 3.0 10.0;;; 11.0 2.0 5.0; 2.0 2.0 4.0; 9.0 5.0 2.0;;;; 2.0 9.0 3.0; 7.0 10.0 4.0; 8.0 1.0 3.0;;; 8.0 5.0 9.0; 7.0 4.0 6.0; 9.0 4.0 4.0;;; 11.0 3.0 8.0; 9.0 7.0 8.0; 1.0 5.0 9.0;;;;; 10.0 9.0 2.0; 5.0 11.0 9.0; 4.0 2.0 4.0;;; 2.0 3.0 4.0; 10.0 8.0 3.0; 7.0 7.0 2.0;;; 11.0 9.0 8.0; 3.0 8.0 6.0; 3.0 4.0 5.0;;;; 6.0 8.0 5.0; 7.0 5.0 4.0; 6.0 5.0 7.0;;; 4.0 2.0 6.0; 8.0 7.0 9.0; 2.0 7.0 3.0;;; 6.0 1.0 10.0; 7.0 11.0 8.0; 9.0 9.0 3.0;;;; 3.0 10.0 3.0; 10.0 7.0 7.0; 1.0 2.0 5.0;;; 3.0 5.0 7.0; 9.0 8.0 1.0; 4.0 7.0 3.0;;; 5.0 5.0 6.0; 8.0 7.0 2.0; 9.0 4.0 8.0;;;;;;;
                        10.0 5.0 8.0; 3.0 3.0 7.0; 6.0 10.0 2.0;;; 4.0 1.0 4.0; 7.0 11.0 7.0; 2.0 10.0 7.0;;; 7.0 10.0 3.0; 6.0 4.0 10.0; 3.0 2.0 11.0;;;; 4.0 6.0 6.0; 1.0 10.0 1.0; 6.0 10.0 7.0;;; 6.0 8.0 4.0; 8.0 7.0 1.0; 6.0 10.0 7.0;;; 3.0 2.0 2.0; 6.0 7.0 1.0; 4.0 6.0 8.0;;;; 4.0 3.0 8.0; 5.0 7.0 2.0; 7.0 3.0 10.0;;; 11.0 9.0 1.0; 2.0 4.0 3.0; 3.0 4.0 3.0;;; 11.0 9.0 10.0; 5.0 10.0 2.0; 7.0 4.0 4.0;;;;; 10.0 10.0 3.0; 9.0 3.0 5.0; 3.0 2.0 8.0;;; 4.0 2.0 7.0; 1.0 4.0 9.0; 1.0 1.0 2.0;;; 9.0 7.0 3.0; 10.0 9.0 5.0; 6.0 3.0 8.0;;;; 6.0 9.0 7.0; 9.0 11.0 5.0; 7.0 4.0 8.0;;; 5.0 10.0 6.0; 2.0 7.0 4.0; 6.0 6.0 9.0;;; 11.0 5.0 7.0; 1.0 8.0 8.0; 2.0 3.0 2.0;;;; 7.0 8.0 7.0; 5.0 11.0 9.0; 1.0 9.0 10.0;;; 7.0 2.0 5.0; 9.0 11.0 6.0; 2.0 8.0 5.0;;; 3.0 1.0 4.0; 9.0 7.0 4.0; 9.0 9.0 3.0;;;;; 2.0 3.0 3.0; 6.0 3.0 5.0; 10.0 10.0 2.0;;; 9.0 2.0 6.0; 6.0 3.0 5.0; 1.0 6.0 5.0;;; 9.0 2.0 3.0; 10.0 7.0 4.0; 5.0 7.0 3.0;;;; 9.0 6.0 8.0; 9.0 3.0 5.0; 6.0 3.0 6.0;;; 2.0 8.0 2.0; 2.0 4.0 10.0; 2.0 6.0 3.0;;; 2.0 9.0 8.0; 4.0 7.0 6.0; 1.0 10.0 3.0;;;; 6.0 3.0 4.0; 6.0 9.0 4.0; 3.0 7.0 11.0;;; 4.0 10.0 3.0; 7.0 8.0 1.0; 8.0 6.0 5.0;;; 2.0 4.0 7.0; 6.0 9.0 9.0; 3.0 9.0 5.0;;;;;; 5.0 3.0 2.0; 9.0 3.0 5.0; 10.0 7.0 4.0;;; 9.0 8.0 9.0; 2.0 4.0 5.0; 6.0 10.0 9.0;;; 7.0 3.0 9.0; 5.0 11.0 4.0; 3.0 6.0 5.0;;;; 3.0 4.0 9.0; 8.0 11.0 2.0; 4.0 3.0 9.0;;; 11.0 9.0 3.0; 10.0 5.0 8.0; 9.0 5.0 10.0;;; 3.0 2.0 7.0; 7.0 2.0 9.0; 10.0 7.0 4.0;;;; 11.0 6.0 7.0; 5.0 3.0 4.0; 1.0 7.0 7.0;;; 6.0 2.0 10.0; 3.0 11.0 2.0; 7.0 10.0 3.0;;; 11.0 10.0 10.0; 2.0 11.0 3.0; 6.0 5.0 6.0;;;;; 2.0 6.0 7.0; 4.0 11.0 5.0; 2.0 7.0 5.0;;; 7.0 10.0 10.0; 2.0 8.0 4.0; 4.0 9.0 3.0;;; 9.0 2.0 4.0; 8.0 7.0 4.0; 7.0 6.0 4.0;;;; 4.0 3.0 3.0; 9.0 7.0 10.0; 4.0 7.0 3.0;;; 11.0 8.0 8.0; 6.0 11.0 1.0; 6.0 8.0 11.0;;; 8.0 9.0 8.0; 10.0 6.0 1.0; 1.0 8.0 5.0;;;; 4.0 10.0 10.0; 9.0 6.0 4.0; 8.0 1.0 2.0;;; 5.0 9.0 5.0; 4.0 7.0 1.0; 10.0 2.0 8.0;;; 6.0 9.0 8.0; 7.0 2.0 3.0; 4.0 9.0 8.0;;;;; 4.0 9.0 8.0; 8.0 4.0 3.0; 6.0 10.0 8.0;;; 6.0 3.0 6.0; 4.0 7.0 3.0; 8.0 2.0 3.0;;; 5.0 8.0 6.0; 4.0 6.0 9.0; 7.0 7.0 5.0;;;; 5.0 10.0 7.0; 5.0 7.0 2.0; 10.0 8.0 8.0;;; 2.0 1.0 2.0; 2.0 2.0 9.0; 5.0 1.0 5.0;;; 3.0 5.0 5.0; 7.0 8.0 1.0; 4.0 3.0 4.0;;;; 9.0 7.0 3.0; 8.0 3.0 1.0; 7.0 4.0 9.0;;; 8.0 7.0 1.0; 3.0 3.0 9.0; 6.0 7.0 11.0;;; 4.0 9.0 3.0; 5.0 6.0 3.0; 8.0 8.0 4.0;;;;;; 8.0 6.0 6.0; 7.0 8.0 7.0; 1.0 3.0 3.0;;; 11.0 10.0 7.0; 10.0 4.0 5.0; 6.0 3.0 4.0;;; 7.0 2.0 1.0; 8.0 3.0 6.0; 10.0 6.0 9.0;;;; 6.0 7.0 4.0; 5.0 8.0 3.0; 3.0 2.0 6.0;;; 10.0 6.0 10.0; 9.0 6.0 1.0; 7.0 6.0 8.0;;; 3.0 8.0 6.0; 3.0 2.0 5.0; 3.0 5.0 9.0;;;; 4.0 9.0 5.0; 5.0 5.0 7.0; 2.0 5.0 8.0;;; 11.0 8.0 8.0; 10.0 4.0 8.0; 2.0 1.0 3.0;;; 3.0 10.0 9.0; 2.0 6.0 9.0; 3.0 9.0 4.0;;;;; 10.0 7.0 8.0; 9.0 2.0 3.0; 3.0 4.0 6.0;;; 6.0 1.0 5.0; 6.0 8.0 2.0; 6.0 6.0 10.0;;; 10.0 3.0 10.0; 8.0 3.0 10.0; 2.0 10.0 10.0;;;; 3.0 5.0 9.0; 6.0 10.0 6.0; 7.0 1.0 9.0;;; 5.0 3.0 10.0; 1.0 10.0 8.0; 5.0 1.0 11.0;;; 6.0 3.0 1.0; 6.0 10.0 10.0; 7.0 9.0 9.0;;;; 2.0 4.0 4.0; 1.0 2.0 4.0; 6.0 5.0 7.0;;; 9.0 7.0 10.0; 7.0 4.0 9.0; 10.0 1.0 7.0;;; 2.0 1.0 4.0; 8.0 4.0 10.0; 3.0 3.0 6.0;;;;; 3.0 4.0 7.0; 5.0 9.0 9.0; 5.0 7.0 8.0;;; 7.0 3.0 3.0; 9.0 7.0 4.0; 2.0 8.0 3.0;;; 2.0 1.0 4.0; 2.0 3.0 6.0; 4.0 1.0 5.0;;;; 3.0 10.0 1.0; 9.0 10.0 6.0; 8.0 9.0 9.0;;; 8.0 9.0 6.0; 6.0 4.0 7.0; 2.0 10.0 2.0;;; 6.0 7.0 9.0; 9.0 11.0 10.0; 3.0 5.0 10.0;;;; 3.0 9.0 4.0; 2.0 6.0 5.0; 9.0 1.0 6.0;;; 7.0 10.0 3.0; 9.0 6.0 7.0; 4.0 6.0 5.0;;; 9.0 5.0 6.0; 5.0 6.0 9.0; 9.0 4.0 11.0
                    ]
                ),
                m_T1 = Categorical([0.2, 0.5, 0.3]),
                m_T2 = Categorical([0.7, 0.2, 0.1]),
                m_T3 = Categorical([0.1, 0.8, 0.1]),
                m_T4 = Categorical([0.9, 0.1, 0.0]),
                m_T5 = Categorical([0.05, 0.1, 0.85])
            ),
            output = Categorical([0.2799048298736155, 0.38747567447649267, 0.33261949564989185])
        ),
        (
            input = (
                q_out = PointMass([0.0, 1.0, 0.0]),
                q_a = DirichletCollection(
                    [
                        5.0 6.0 2.0; 9.0 6.0 6.0; 6.0 1.0 8.0;;; 3.0 9.0 2.0; 2.0 7.0 5.0; 9.0 8.0 7.0;;; 10.0 5.0 10.0; 6.0 11.0 7.0; 1.0 9.0 2.0;;;; 4.0 1.0 7.0; 3.0 9.0 7.0; 7.0 4.0 5.0;;; 10.0 6.0 1.0; 4.0 2.0 4.0; 10.0 3.0 3.0;;; 3.0 5.0 6.0; 10.0 2.0 3.0; 6.0 4.0 7.0;;;; 9.0 8.0 7.0; 10.0 6.0 4.0; 4.0 4.0 9.0;;; 9.0 3.0 4.0; 3.0 11.0 10.0; 3.0 10.0 6.0;;; 5.0 5.0 8.0; 1.0 8.0 9.0; 1.0 6.0 9.0;;;;; 6.0 1.0 1.0; 8.0 10.0 5.0; 3.0 2.0 8.0;;; 4.0 5.0 7.0; 10.0 9.0 1.0; 7.0 2.0 2.0;;; 10.0 3.0 2.0; 10.0 4.0 4.0; 2.0 10.0 9.0;;;; 3.0 2.0 9.0; 9.0 3.0 2.0; 5.0 10.0 6.0;;; 10.0 8.0 10.0; 9.0 9.0 6.0; 8.0 1.0 10.0;;; 11.0 7.0 5.0; 4.0 9.0 9.0; 4.0 10.0 2.0;;;; 11.0 2.0 6.0; 2.0 4.0 2.0; 7.0 1.0 5.0;;; 11.0 6.0 10.0; 6.0 11.0 10.0; 4.0 5.0 6.0;;; 7.0 4.0 9.0; 10.0 3.0 1.0; 1.0 5.0 9.0;;;;; 3.0 1.0 10.0; 3.0 10.0 5.0; 4.0 6.0 11.0;;; 5.0 10.0 10.0; 10.0 7.0 7.0; 4.0 9.0 4.0;;; 8.0 7.0 5.0; 9.0 6.0 8.0; 10.0 1.0 5.0;;;; 9.0 5.0 2.0; 9.0 8.0 2.0; 8.0 4.0 11.0;;; 10.0 7.0 1.0; 4.0 3.0 4.0; 7.0 6.0 9.0;;; 6.0 4.0 3.0; 4.0 7.0 6.0; 3.0 9.0 5.0;;;; 5.0 7.0 9.0; 7.0 9.0 5.0; 1.0 4.0 10.0;;; 9.0 6.0 5.0; 2.0 4.0 10.0; 3.0 10.0 9.0;;; 10.0 5.0 9.0; 8.0 6.0 7.0; 1.0 10.0 10.0;;;;;; 5.0 4.0 5.0; 4.0 2.0 9.0; 10.0 2.0 10.0;;; 11.0 6.0 3.0; 7.0 4.0 6.0; 10.0 6.0 10.0;;; 11.0 9.0 6.0; 4.0 9.0 1.0; 6.0 7.0 3.0;;;; 3.0 2.0 1.0; 7.0 7.0 9.0; 7.0 8.0 9.0;;; 6.0 9.0 4.0; 1.0 3.0 3.0; 3.0 3.0 7.0;;; 4.0 1.0 4.0; 4.0 11.0 6.0; 4.0 10.0 7.0;;;; 10.0 5.0 9.0; 7.0 10.0 10.0; 9.0 10.0 4.0;;; 5.0 10.0 3.0; 5.0 8.0 9.0; 2.0 4.0 10.0;;; 9.0 5.0 8.0; 1.0 7.0 10.0; 8.0 8.0 5.0;;;;; 10.0 7.0 4.0; 10.0 9.0 1.0; 4.0 8.0 4.0;;; 9.0 6.0 7.0; 4.0 11.0 8.0; 7.0 7.0 10.0;;; 5.0 8.0 5.0; 10.0 6.0 4.0; 10.0 5.0 4.0;;;; 2.0 4.0 6.0; 3.0 8.0 4.0; 5.0 10.0 11.0;;; 10.0 8.0 8.0; 9.0 11.0 8.0; 3.0 3.0 6.0;;; 3.0 5.0 3.0; 6.0 2.0 5.0; 8.0 4.0 9.0;;;; 7.0 4.0 9.0; 2.0 2.0 2.0; 4.0 3.0 8.0;;; 5.0 5.0 2.0; 2.0 8.0 1.0; 10.0 8.0 2.0;;; 7.0 6.0 6.0; 6.0 5.0 4.0; 4.0 5.0 10.0;;;;; 8.0 4.0 2.0; 5.0 5.0 7.0; 8.0 4.0 4.0;;; 7.0 5.0 6.0; 4.0 11.0 6.0; 8.0 1.0 10.0;;; 11.0 7.0 9.0; 10.0 5.0 9.0; 1.0 2.0 5.0;;;; 6.0 10.0 5.0; 2.0 2.0 8.0; 3.0 8.0 3.0;;; 7.0 6.0 9.0; 6.0 6.0 3.0; 5.0 5.0 2.0;;; 3.0 6.0 1.0; 9.0 9.0 5.0; 10.0 8.0 2.0;;;; 7.0 2.0 3.0; 2.0 6.0 2.0; 9.0 5.0 5.0;;; 5.0 9.0 6.0; 8.0 2.0 3.0; 8.0 10.0 7.0;;; 5.0 10.0 1.0; 3.0 2.0 10.0; 6.0 6.0 11.0;;;;;; 9.0 3.0 4.0; 10.0 2.0 2.0; 4.0 1.0 4.0;;; 5.0 1.0 7.0; 6.0 7.0 6.0; 6.0 8.0 10.0;;; 9.0 9.0 10.0; 3.0 8.0 5.0; 6.0 1.0 7.0;;;; 5.0 7.0 1.0; 8.0 11.0 5.0; 4.0 8.0 7.0;;; 8.0 3.0 10.0; 5.0 6.0 8.0; 2.0 2.0 4.0;;; 5.0 8.0 9.0; 2.0 5.0 3.0; 4.0 1.0 10.0;;;; 9.0 10.0 7.0; 6.0 8.0 2.0; 7.0 1.0 8.0;;; 5.0 3.0 6.0; 9.0 3.0 8.0; 9.0 1.0 6.0;;; 5.0 7.0 6.0; 8.0 11.0 1.0; 10.0 7.0 2.0;;;;; 5.0 8.0 4.0; 8.0 4.0 6.0; 10.0 10.0 2.0;;; 8.0 2.0 6.0; 5.0 8.0 6.0; 3.0 10.0 3.0;;; 2.0 2.0 6.0; 5.0 2.0 10.0; 3.0 3.0 9.0;;;; 7.0 8.0 2.0; 7.0 10.0 2.0; 9.0 3.0 5.0;;; 11.0 1.0 10.0; 3.0 8.0 4.0; 1.0 6.0 5.0;;; 5.0 6.0 4.0; 10.0 11.0 2.0; 4.0 4.0 11.0;;;; 4.0 3.0 9.0; 3.0 11.0 10.0; 1.0 2.0 11.0;;; 6.0 6.0 5.0; 6.0 11.0 2.0; 10.0 9.0 7.0;;; 3.0 1.0 10.0; 9.0 6.0 2.0; 7.0 8.0 8.0;;;;; 5.0 3.0 9.0; 4.0 10.0 7.0; 9.0 3.0 2.0;;; 2.0 3.0 9.0; 5.0 5.0 2.0; 7.0 10.0 3.0;;; 9.0 10.0 8.0; 3.0 4.0 8.0; 8.0 4.0 10.0;;;; 10.0 9.0 8.0; 4.0 7.0 9.0; 2.0 8.0 9.0;;; 10.0 1.0 9.0; 1.0 9.0 6.0; 6.0 2.0 7.0;;; 5.0 6.0 6.0; 5.0 8.0 3.0; 7.0 7.0 11.0;;;; 7.0 5.0 7.0; 6.0 11.0 7.0; 5.0 2.0 3.0;;; 8.0 5.0 4.0; 9.0 8.0 9.0; 8.0 9.0 2.0;;; 10.0 5.0 2.0; 4.0 6.0 2.0; 9.0 6.0 7.0;;;;;;; 6.0 5.0 6.0; 5.0 4.0 6.0; 3.0 6.0 10.0;;; 9.0 7.0 9.0; 9.0 5.0 6.0; 6.0 1.0 5.0;;; 8.0 6.0 2.0; 4.0 11.0 9.0; 8.0 2.0 9.0;;;; 7.0 5.0 6.0; 2.0 2.0 4.0; 1.0 6.0 4.0;;; 2.0 2.0 9.0; 6.0 10.0 9.0; 4.0 7.0 11.0;;; 8.0 7.0 5.0; 10.0 8.0 10.0; 6.0 10.0 6.0;;;; 10.0 10.0 2.0; 2.0 5.0 6.0; 10.0 4.0 5.0;;; 6.0 10.0 8.0; 5.0 7.0 9.0; 8.0 4.0 10.0;;; 10.0 6.0 7.0; 3.0 2.0 1.0; 7.0 10.0 10.0;;;;; 11.0 9.0 7.0; 4.0 7.0 9.0; 1.0 1.0 8.0;;; 5.0 7.0 9.0; 10.0 4.0 10.0; 1.0 2.0 10.0;;; 11.0 5.0 5.0; 8.0 5.0 5.0; 5.0 5.0 5.0;;;; 8.0 3.0 9.0; 1.0 11.0 7.0; 7.0 9.0 2.0;;; 9.0 1.0 1.0; 7.0 10.0 2.0; 3.0 7.0 5.0;;; 10.0 10.0 4.0; 7.0 8.0 1.0; 1.0 5.0 6.0;;;; 8.0 4.0 5.0; 4.0 3.0 2.0; 9.0 8.0 2.0;;; 6.0 1.0 8.0; 2.0 8.0 7.0; 7.0 9.0 4.0;;; 3.0 10.0 5.0; 10.0 10.0 9.0; 3.0 4.0 2.0;;;;; 11.0 2.0 3.0; 1.0 6.0 6.0; 7.0 8.0 7.0;;; 6.0 1.0 5.0; 3.0 11.0 6.0; 9.0 6.0 3.0;;; 11.0 2.0 9.0; 8.0 8.0 8.0; 7.0 1.0 10.0;;;; 3.0 4.0 10.0; 9.0 6.0 2.0; 6.0 3.0 2.0;;; 9.0 4.0 10.0; 1.0 2.0 3.0; 4.0 5.0 11.0;;; 4.0 7.0 3.0; 10.0 11.0 10.0; 5.0 10.0 9.0;;;; 8.0 7.0 10.0; 5.0 11.0 7.0; 5.0 10.0 5.0;;; 6.0 10.0 2.0; 4.0 2.0 6.0; 4.0 2.0 2.0;;; 9.0 10.0 5.0; 7.0 10.0 6.0; 5.0 9.0 6.0;;;;;; 8.0 4.0 4.0; 1.0 11.0 6.0; 7.0 10.0 7.0;;; 6.0 4.0 7.0; 8.0 10.0 1.0; 7.0 3.0 3.0;;; 11.0 7.0 8.0; 8.0 11.0 10.0; 7.0 9.0 10.0;;;; 4.0 10.0 6.0; 10.0 10.0 7.0; 3.0 9.0 5.0;;; 9.0 8.0 5.0; 8.0 10.0 1.0; 2.0 3.0 11.0;;; 11.0 3.0 3.0; 9.0 8.0 4.0; 4.0 9.0 5.0;;;; 11.0 1.0 6.0; 1.0 5.0 6.0; 6.0 9.0 7.0;;; 4.0 6.0 3.0; 2.0 6.0 2.0; 7.0 3.0 3.0;;; 2.0 4.0 5.0; 9.0 2.0 2.0; 6.0 8.0 5.0;;;;; 7.0 4.0 5.0; 3.0 7.0 9.0; 2.0 10.0 5.0;;; 11.0 6.0 8.0; 3.0 10.0 10.0; 10.0 8.0 10.0;;; 11.0 9.0 7.0; 3.0 7.0 1.0; 1.0 3.0 3.0;;;; 2.0 1.0 10.0; 1.0 9.0 9.0; 1.0 4.0 6.0;;; 10.0 1.0 5.0; 10.0 3.0 2.0; 6.0 9.0 3.0;;; 4.0 6.0 2.0; 2.0 3.0 4.0; 8.0 5.0 3.0;;;; 11.0 9.0 8.0; 4.0 2.0 9.0; 9.0 2.0 7.0;;; 10.0 8.0 8.0; 4.0 6.0 1.0; 1.0 2.0 4.0;;; 5.0 2.0 5.0; 4.0 2.0 5.0; 5.0 3.0 2.0;;;;; 3.0 3.0 10.0; 4.0 2.0 10.0; 3.0 3.0 4.0;;; 6.0 6.0 9.0; 7.0 4.0 5.0; 9.0 2.0 7.0;;; 2.0 7.0 6.0; 3.0 4.0 3.0; 1.0 3.0 9.0;;;; 8.0 2.0 7.0; 9.0 10.0 3.0; 2.0 10.0 10.0;;; 11.0 8.0 10.0; 7.0 5.0 1.0; 9.0 3.0 9.0;;; 4.0 8.0 10.0; 1.0 9.0 1.0; 9.0 5.0 7.0;;;; 8.0 3.0 1.0; 5.0 6.0 9.0; 1.0 4.0 6.0;;; 6.0 8.0 5.0; 5.0 10.0 4.0; 2.0 2.0 10.0;;; 10.0 8.0 2.0; 1.0 9.0 10.0; 2.0 10.0 3.0;;;;;; 3.0 7.0 5.0; 9.0 3.0 6.0; 8.0 5.0 11.0;;; 3.0 2.0 10.0; 10.0 11.0 8.0; 1.0 5.0 3.0;;; 6.0 10.0 8.0; 8.0 8.0 9.0; 5.0 8.0 5.0;;;; 6.0 6.0 2.0; 7.0 5.0 2.0; 5.0 7.0 4.0;;; 3.0 9.0 8.0; 9.0 2.0 3.0; 9.0 4.0 5.0;;; 6.0 1.0 2.0; 9.0 4.0 7.0; 7.0 9.0 9.0;;;; 8.0 9.0 8.0; 8.0 7.0 9.0; 7.0 7.0 4.0;;; 3.0 2.0 1.0; 9.0 11.0 5.0; 6.0 3.0 3.0;;; 11.0 2.0 7.0; 2.0 3.0 7.0; 8.0 6.0 9.0;;;;; 6.0 5.0 2.0; 8.0 9.0 6.0; 9.0 4.0 5.0;;; 6.0 2.0 9.0; 3.0 11.0 2.0; 3.0 8.0 4.0;;; 7.0 3.0 6.0; 7.0 2.0 1.0; 3.0 1.0 9.0;;;; 9.0 5.0 6.0; 10.0 9.0 10.0; 2.0 4.0 3.0;;; 7.0 7.0 10.0; 9.0 4.0 8.0; 8.0 3.0 2.0;;; 6.0 10.0 6.0; 6.0 6.0 8.0; 6.0 4.0 8.0;;;; 7.0 4.0 4.0; 5.0 11.0 8.0; 9.0 1.0 11.0;;; 7.0 5.0 7.0; 1.0 5.0 8.0; 7.0 9.0 9.0;;; 7.0 3.0 1.0; 6.0 2.0 5.0; 10.0 1.0 10.0;;;;; 5.0 6.0 5.0; 3.0 6.0 10.0; 7.0 3.0 8.0;;; 5.0 5.0 6.0; 4.0 5.0 1.0; 10.0 1.0 8.0;;; 4.0 4.0 8.0; 10.0 10.0 3.0; 5.0 7.0 6.0;;;; 10.0 1.0 3.0; 10.0 7.0 10.0; 6.0 8.0 7.0;;; 2.0 7.0 9.0; 3.0 11.0 3.0; 5.0 3.0 5.0;;; 7.0 1.0 3.0; 2.0 9.0 4.0; 7.0 3.0 4.0;;;; 2.0 4.0 10.0; 1.0 8.0 6.0; 1.0 2.0 10.0;;; 7.0 2.0 10.0; 8.0 2.0 9.0; 2.0 1.0 9.0;;; 7.0 6.0 3.0; 5.0 8.0 4.0; 9.0 9.0 5.0;;;;;;; 9.0 1.0 1.0; 3.0 4.0 7.0; 4.0 5.0 10.0;;; 10.0 9.0 8.0; 3.0 9.0 2.0; 5.0 3.0 4.0;;; 10.0 7.0 5.0; 10.0 4.0 7.0; 10.0 4.0 11.0;;;; 3.0 8.0 4.0; 8.0 7.0 10.0; 2.0 6.0 4.0;;; 11.0 1.0 3.0; 4.0 3.0 5.0; 7.0 5.0 3.0;;; 10.0 8.0 5.0; 8.0 8.0 10.0; 8.0 7.0 9.0;;;; 11.0 3.0 10.0; 8.0 9.0 3.0; 1.0 4.0 9.0;;; 3.0 9.0 4.0; 3.0 6.0 3.0; 10.0 5.0 11.0;;; 10.0 9.0 1.0; 8.0 7.0 10.0; 9.0 2.0 10.0;;;;; 7.0 4.0 6.0; 3.0 11.0 4.0; 10.0 9.0 10.0;;; 4.0 10.0 10.0; 2.0 11.0 6.0; 10.0 8.0 6.0;;; 6.0 4.0 4.0; 1.0 10.0 1.0; 1.0 8.0 11.0;;;; 9.0 10.0 9.0; 6.0 7.0 8.0; 6.0 3.0 8.0;;; 6.0 7.0 7.0; 10.0 11.0 4.0; 1.0 7.0 7.0;;; 2.0 6.0 3.0; 3.0 5.0 6.0; 2.0 2.0 11.0;;;; 4.0 7.0 5.0; 2.0 11.0 1.0; 8.0 5.0 3.0;;; 4.0 10.0 4.0; 9.0 3.0 8.0; 4.0 8.0 4.0;;; 3.0 2.0 1.0; 7.0 3.0 4.0; 3.0 8.0 9.0;;;;; 3.0 5.0 7.0; 4.0 8.0 4.0; 10.0 10.0 8.0;;; 6.0 5.0 1.0; 1.0 3.0 4.0; 1.0 8.0 2.0;;; 9.0 1.0 7.0; 5.0 7.0 2.0; 4.0 1.0 9.0;;;; 4.0 4.0 7.0; 7.0 4.0 7.0; 8.0 10.0 3.0;;; 3.0 3.0 9.0; 1.0 3.0 6.0; 1.0 7.0 11.0;;; 6.0 8.0 8.0; 7.0 11.0 7.0; 8.0 10.0 10.0;;;; 8.0 1.0 7.0; 5.0 3.0 10.0; 7.0 9.0 9.0;;; 3.0 2.0 4.0; 1.0 7.0 8.0; 10.0 2.0 10.0;;; 6.0 5.0 10.0; 10.0 10.0 6.0; 4.0 4.0 5.0;;;;;; 8.0 1.0 9.0; 4.0 3.0 5.0; 4.0 10.0 6.0;;; 11.0 4.0 5.0; 10.0 6.0 8.0; 1.0 10.0 2.0;;; 2.0 1.0 1.0; 10.0 8.0 10.0; 6.0 7.0 8.0;;;; 7.0 1.0 5.0; 9.0 4.0 2.0; 7.0 3.0 5.0;;; 8.0 4.0 1.0; 2.0 9.0 2.0; 9.0 9.0 9.0;;; 3.0 1.0 5.0; 4.0 5.0 1.0; 9.0 9.0 2.0;;;; 5.0 10.0 2.0; 9.0 7.0 1.0; 5.0 8.0 10.0;;; 2.0 2.0 6.0; 4.0 11.0 5.0; 10.0 1.0 5.0;;; 8.0 1.0 6.0; 8.0 6.0 8.0; 2.0 7.0 7.0;;;;; 10.0 7.0 10.0; 5.0 7.0 6.0; 4.0 7.0 11.0;;; 5.0 7.0 2.0; 1.0 5.0 8.0; 3.0 6.0 10.0;;; 6.0 2.0 8.0; 10.0 6.0 2.0; 8.0 6.0 10.0;;;; 7.0 2.0 7.0; 2.0 11.0 3.0; 8.0 1.0 11.0;;; 3.0 7.0 4.0; 1.0 5.0 3.0; 6.0 2.0 4.0;;; 3.0 10.0 3.0; 7.0 3.0 8.0; 2.0 2.0 8.0;;;; 2.0 2.0 5.0; 5.0 9.0 7.0; 7.0 4.0 5.0;;; 9.0 2.0 8.0; 10.0 6.0 4.0; 2.0 6.0 4.0;;; 5.0 7.0 2.0; 2.0 4.0 6.0; 5.0 1.0 10.0;;;;; 2.0 3.0 4.0; 8.0 3.0 10.0; 9.0 1.0 6.0;;; 9.0 5.0 1.0; 9.0 3.0 3.0; 1.0 1.0 7.0;;; 7.0 10.0 3.0; 2.0 6.0 9.0; 8.0 8.0 6.0;;;; 9.0 2.0 3.0; 10.0 10.0 10.0; 3.0 5.0 2.0;;; 11.0 6.0 2.0; 2.0 3.0 3.0; 5.0 6.0 4.0;;; 8.0 8.0 9.0; 7.0 10.0 4.0; 2.0 1.0 10.0;;;; 8.0 6.0 8.0; 7.0 9.0 2.0; 9.0 2.0 4.0;;; 3.0 4.0 9.0; 7.0 3.0 2.0; 10.0 4.0 6.0;;; 4.0 3.0 3.0; 10.0 2.0 4.0; 8.0 1.0 10.0;;;;;; 5.0 4.0 5.0; 4.0 9.0 4.0; 7.0 5.0 7.0;;; 9.0 10.0 6.0; 3.0 11.0 3.0; 3.0 10.0 3.0;;; 8.0 1.0 9.0; 10.0 8.0 1.0; 8.0 9.0 7.0;;;; 7.0 3.0 4.0; 6.0 8.0 4.0; 7.0 9.0 2.0;;; 7.0 10.0 5.0; 1.0 2.0 8.0; 7.0 5.0 10.0;;; 3.0 1.0 3.0; 9.0 8.0 6.0; 7.0 9.0 11.0;;;; 7.0 6.0 8.0; 9.0 10.0 9.0; 1.0 6.0 4.0;;; 7.0 5.0 9.0; 9.0 10.0 3.0; 5.0 7.0 9.0;;; 2.0 9.0 1.0; 1.0 3.0 10.0; 10.0 2.0 11.0;;;;; 3.0 5.0 4.0; 8.0 2.0 5.0; 4.0 6.0 9.0;;; 4.0 1.0 2.0; 9.0 7.0 1.0; 8.0 1.0 11.0;;; 5.0 2.0 8.0; 1.0 11.0 2.0; 2.0 8.0 9.0;;;; 7.0 3.0 1.0; 9.0 11.0 2.0; 5.0 8.0 7.0;;; 2.0 2.0 10.0; 2.0 10.0 4.0; 7.0 10.0 5.0;;; 8.0 10.0 10.0; 3.0 2.0 5.0; 8.0 8.0 9.0;;;; 10.0 5.0 2.0; 6.0 4.0 4.0; 9.0 4.0 3.0;;; 9.0 1.0 8.0; 4.0 9.0 10.0; 5.0 2.0 7.0;;; 10.0 3.0 5.0; 9.0 9.0 4.0; 10.0 1.0 2.0;;;;; 2.0 1.0 3.0; 3.0 9.0 10.0; 8.0 3.0 3.0;;; 4.0 10.0 2.0; 5.0 9.0 1.0; 7.0 6.0 5.0;;; 8.0 10.0 9.0; 10.0 3.0 6.0; 3.0 6.0 11.0;;;; 11.0 6.0 4.0; 3.0 11.0 8.0; 8.0 6.0 3.0;;; 6.0 8.0 4.0; 10.0 7.0 5.0; 10.0 6.0 9.0;;; 6.0 9.0 9.0; 7.0 6.0 2.0; 2.0 7.0 10.0;;;; 6.0 1.0 2.0; 9.0 10.0 10.0; 9.0 7.0 2.0;;; 2.0 4.0 3.0; 7.0 8.0 2.0; 9.0 2.0 10.0;;; 2.0 5.0 5.0; 8.0 7.0 5.0; 1.0 2.0 6.0;;;;;;;;
                        8.0 4.0 1.0; 4.0 7.0 5.0; 3.0 9.0 11.0;;; 9.0 3.0 4.0; 3.0 5.0 6.0; 9.0 5.0 7.0;;; 11.0 9.0 3.0; 6.0 11.0 7.0; 4.0 6.0 3.0;;;; 11.0 2.0 4.0; 7.0 6.0 6.0; 7.0 3.0 9.0;;; 6.0 6.0 4.0; 9.0 10.0 8.0; 6.0 7.0 10.0;;; 3.0 5.0 1.0; 9.0 8.0 5.0; 5.0 8.0 3.0;;;; 9.0 10.0 7.0; 1.0 10.0 2.0; 3.0 7.0 3.0;;; 11.0 3.0 8.0; 1.0 9.0 7.0; 9.0 8.0 5.0;;; 5.0 5.0 9.0; 3.0 6.0 1.0; 7.0 7.0 8.0;;;;; 10.0 7.0 3.0; 8.0 10.0 8.0; 9.0 5.0 2.0;;; 6.0 2.0 1.0; 6.0 5.0 3.0; 5.0 4.0 8.0;;; 10.0 8.0 10.0; 3.0 2.0 4.0; 1.0 10.0 10.0;;;; 11.0 1.0 7.0; 7.0 11.0 8.0; 10.0 6.0 9.0;;; 4.0 10.0 3.0; 7.0 11.0 6.0; 7.0 8.0 10.0;;; 10.0 1.0 6.0; 6.0 8.0 1.0; 1.0 3.0 10.0;;;; 11.0 10.0 5.0; 8.0 6.0 9.0; 7.0 1.0 2.0;;; 5.0 7.0 1.0; 2.0 11.0 8.0; 9.0 6.0 9.0;;; 8.0 1.0 1.0; 9.0 2.0 5.0; 8.0 2.0 5.0;;;;; 3.0 2.0 8.0; 9.0 2.0 6.0; 2.0 9.0 7.0;;; 7.0 2.0 5.0; 10.0 9.0 6.0; 8.0 4.0 5.0;;; 3.0 4.0 4.0; 2.0 11.0 1.0; 3.0 4.0 9.0;;;; 6.0 10.0 1.0; 7.0 7.0 6.0; 5.0 1.0 9.0;;; 9.0 1.0 4.0; 6.0 4.0 9.0; 6.0 6.0 2.0;;; 11.0 1.0 8.0; 2.0 3.0 7.0; 7.0 10.0 11.0;;;; 4.0 7.0 5.0; 6.0 10.0 5.0; 10.0 5.0 2.0;;; 7.0 8.0 8.0; 3.0 4.0 7.0; 6.0 9.0 6.0;;; 11.0 8.0 10.0; 6.0 5.0 2.0; 3.0 3.0 4.0;;;;;; 9.0 3.0 10.0; 10.0 5.0 2.0; 3.0 3.0 11.0;;; 9.0 1.0 2.0; 8.0 11.0 9.0; 6.0 3.0 7.0;;; 2.0 8.0 9.0; 2.0 9.0 7.0; 2.0 6.0 2.0;;;; 7.0 3.0 1.0; 5.0 5.0 1.0; 1.0 2.0 6.0;;; 5.0 8.0 8.0; 9.0 5.0 5.0; 9.0 2.0 7.0;;; 7.0 10.0 8.0; 1.0 11.0 3.0; 8.0 7.0 2.0;;;; 9.0 10.0 1.0; 10.0 11.0 3.0; 1.0 10.0 3.0;;; 9.0 9.0 4.0; 10.0 3.0 2.0; 7.0 6.0 2.0;;; 11.0 9.0 1.0; 5.0 7.0 4.0; 3.0 1.0 8.0;;;;; 7.0 2.0 7.0; 4.0 8.0 10.0; 9.0 4.0 3.0;;; 4.0 4.0 3.0; 3.0 5.0 4.0; 6.0 1.0 2.0;;; 5.0 5.0 4.0; 3.0 2.0 1.0; 9.0 2.0 4.0;;;; 3.0 5.0 5.0; 5.0 2.0 10.0; 1.0 7.0 11.0;;; 5.0 2.0 7.0; 8.0 8.0 1.0; 2.0 7.0 11.0;;; 10.0 8.0 10.0; 10.0 10.0 1.0; 8.0 1.0 8.0;;;; 3.0 1.0 5.0; 6.0 11.0 2.0; 3.0 4.0 3.0;;; 4.0 8.0 4.0; 5.0 6.0 3.0; 4.0 4.0 2.0;;; 10.0 10.0 8.0; 5.0 5.0 9.0; 3.0 10.0 2.0;;;;; 11.0 5.0 1.0; 2.0 6.0 10.0; 2.0 4.0 9.0;;; 10.0 1.0 2.0; 4.0 2.0 4.0; 7.0 1.0 9.0;;; 8.0 7.0 9.0; 3.0 10.0 2.0; 2.0 6.0 7.0;;;; 3.0 8.0 3.0; 2.0 8.0 7.0; 1.0 2.0 7.0;;; 2.0 5.0 5.0; 2.0 9.0 3.0; 6.0 9.0 7.0;;; 2.0 5.0 6.0; 1.0 3.0 8.0; 2.0 1.0 6.0;;;; 10.0 7.0 4.0; 10.0 9.0 1.0; 1.0 7.0 4.0;;; 8.0 5.0 8.0; 9.0 10.0 3.0; 7.0 9.0 4.0;;; 7.0 4.0 6.0; 6.0 7.0 1.0; 7.0 6.0 6.0;;;;;; 11.0 4.0 6.0; 9.0 8.0 4.0; 6.0 8.0 10.0;;; 7.0 10.0 10.0; 9.0 7.0 7.0; 9.0 10.0 4.0;;; 10.0 2.0 5.0; 8.0 3.0 7.0; 4.0 2.0 6.0;;;; 11.0 1.0 9.0; 6.0 3.0 5.0; 5.0 10.0 2.0;;; 8.0 10.0 1.0; 9.0 8.0 9.0; 8.0 8.0 3.0;;; 2.0 3.0 6.0; 4.0 2.0 4.0; 7.0 5.0 10.0;;;; 9.0 4.0 6.0; 7.0 2.0 6.0; 5.0 10.0 3.0;;; 11.0 6.0 4.0; 4.0 5.0 8.0; 9.0 1.0 2.0;;; 5.0 1.0 4.0; 5.0 11.0 4.0; 2.0 9.0 10.0;;;;; 7.0 3.0 1.0; 8.0 6.0 8.0; 6.0 9.0 5.0;;; 11.0 5.0 4.0; 4.0 10.0 2.0; 5.0 10.0 10.0;;; 10.0 4.0 6.0; 7.0 9.0 8.0; 8.0 7.0 8.0;;;; 8.0 8.0 5.0; 4.0 6.0 1.0; 3.0 6.0 10.0;;; 10.0 7.0 1.0; 5.0 5.0 7.0; 10.0 9.0 8.0;;; 11.0 3.0 4.0; 7.0 5.0 7.0; 5.0 2.0 2.0;;;; 4.0 2.0 6.0; 2.0 4.0 6.0; 7.0 2.0 2.0;;; 2.0 3.0 10.0; 1.0 5.0 3.0; 1.0 6.0 7.0;;; 9.0 4.0 8.0; 6.0 7.0 1.0; 1.0 1.0 7.0;;;;; 7.0 10.0 2.0; 7.0 6.0 1.0; 4.0 1.0 7.0;;; 8.0 5.0 9.0; 8.0 10.0 3.0; 3.0 4.0 5.0;;; 10.0 7.0 5.0; 3.0 4.0 1.0; 1.0 3.0 8.0;;;; 6.0 5.0 6.0; 10.0 9.0 5.0; 3.0 9.0 4.0;;; 8.0 2.0 10.0; 2.0 9.0 7.0; 4.0 8.0 3.0;;; 7.0 8.0 8.0; 8.0 10.0 6.0; 4.0 1.0 9.0;;;; 7.0 7.0 8.0; 6.0 8.0 3.0; 1.0 6.0 4.0;;; 8.0 4.0 10.0; 6.0 9.0 8.0; 8.0 10.0 5.0;;; 8.0 2.0 2.0; 2.0 9.0 9.0; 2.0 4.0 11.0;;;;;;; 10.0 10.0 7.0; 10.0 5.0 4.0; 7.0 1.0 2.0;;; 9.0 3.0 5.0; 10.0 2.0 2.0; 5.0 3.0 9.0;;; 8.0 5.0 8.0; 7.0 4.0 5.0; 10.0 5.0 11.0;;;; 4.0 4.0 6.0; 8.0 6.0 2.0; 3.0 3.0 8.0;;; 4.0 3.0 10.0; 5.0 2.0 10.0; 3.0 10.0 3.0;;; 4.0 1.0 3.0; 5.0 9.0 4.0; 10.0 4.0 2.0;;;; 6.0 1.0 1.0; 1.0 8.0 3.0; 5.0 9.0 5.0;;; 11.0 8.0 5.0; 2.0 2.0 6.0; 2.0 9.0 8.0;;; 11.0 1.0 1.0; 7.0 10.0 4.0; 3.0 1.0 10.0;;;;; 8.0 10.0 7.0; 5.0 7.0 5.0; 5.0 4.0 7.0;;; 2.0 1.0 8.0; 9.0 9.0 10.0; 7.0 3.0 10.0;;; 6.0 1.0 10.0; 1.0 4.0 2.0; 9.0 10.0 8.0;;;; 4.0 10.0 7.0; 1.0 6.0 1.0; 8.0 3.0 11.0;;; 11.0 8.0 4.0; 10.0 2.0 8.0; 2.0 1.0 3.0;;; 8.0 9.0 6.0; 9.0 5.0 5.0; 10.0 6.0 3.0;;;; 9.0 3.0 2.0; 7.0 2.0 3.0; 10.0 5.0 2.0;;; 5.0 10.0 2.0; 8.0 2.0 9.0; 7.0 3.0 9.0;;; 4.0 5.0 6.0; 7.0 7.0 7.0; 1.0 7.0 4.0;;;;; 6.0 9.0 3.0; 8.0 4.0 2.0; 4.0 8.0 4.0;;; 7.0 1.0 9.0; 5.0 9.0 6.0; 8.0 8.0 6.0;;; 3.0 4.0 1.0; 10.0 3.0 8.0; 5.0 6.0 7.0;;;; 4.0 2.0 1.0; 1.0 8.0 2.0; 5.0 3.0 4.0;;; 7.0 2.0 6.0; 2.0 9.0 2.0; 3.0 6.0 2.0;;; 9.0 4.0 10.0; 2.0 10.0 7.0; 2.0 6.0 2.0;;;; 9.0 8.0 8.0; 5.0 7.0 9.0; 6.0 4.0 9.0;;; 7.0 2.0 6.0; 6.0 8.0 6.0; 2.0 10.0 11.0;;; 4.0 3.0 9.0; 6.0 2.0 5.0; 3.0 9.0 9.0;;;;;; 10.0 1.0 1.0; 4.0 6.0 8.0; 6.0 8.0 4.0;;; 2.0 3.0 8.0; 1.0 9.0 5.0; 9.0 4.0 2.0;;; 4.0 10.0 9.0; 8.0 3.0 3.0; 6.0 6.0 2.0;;;; 2.0 2.0 6.0; 10.0 4.0 9.0; 5.0 9.0 3.0;;; 9.0 5.0 6.0; 4.0 11.0 3.0; 1.0 10.0 8.0;;; 9.0 10.0 10.0; 1.0 4.0 7.0; 6.0 7.0 8.0;;;; 4.0 7.0 2.0; 7.0 7.0 4.0; 3.0 5.0 9.0;;; 8.0 7.0 10.0; 2.0 6.0 2.0; 7.0 9.0 10.0;;; 5.0 7.0 9.0; 8.0 11.0 3.0; 7.0 4.0 11.0;;;;; 5.0 1.0 5.0; 5.0 8.0 10.0; 5.0 5.0 4.0;;; 7.0 10.0 3.0; 10.0 5.0 7.0; 2.0 3.0 7.0;;; 4.0 10.0 8.0; 8.0 9.0 8.0; 7.0 3.0 10.0;;;; 9.0 7.0 3.0; 6.0 9.0 6.0; 7.0 2.0 6.0;;; 11.0 5.0 3.0; 1.0 2.0 1.0; 9.0 3.0 9.0;;; 10.0 5.0 4.0; 7.0 7.0 4.0; 9.0 10.0 7.0;;;; 2.0 1.0 2.0; 6.0 9.0 3.0; 6.0 7.0 8.0;;; 11.0 6.0 7.0; 10.0 5.0 7.0; 1.0 8.0 5.0;;; 2.0 10.0 10.0; 10.0 10.0 5.0; 7.0 9.0 10.0;;;;; 2.0 9.0 3.0; 4.0 9.0 10.0; 5.0 1.0 5.0;;; 9.0 4.0 7.0; 1.0 2.0 2.0; 10.0 9.0 3.0;;; 9.0 10.0 7.0; 8.0 5.0 7.0; 7.0 10.0 3.0;;;; 4.0 4.0 7.0; 10.0 10.0 4.0; 10.0 10.0 4.0;;; 9.0 8.0 2.0; 4.0 10.0 5.0; 5.0 10.0 11.0;;; 2.0 8.0 6.0; 6.0 7.0 5.0; 5.0 2.0 11.0;;;; 5.0 8.0 2.0; 7.0 2.0 5.0; 3.0 8.0 4.0;;; 11.0 9.0 1.0; 1.0 9.0 7.0; 9.0 2.0 2.0;;; 2.0 4.0 4.0; 7.0 9.0 10.0; 2.0 4.0 8.0;;;;;; 2.0 8.0 4.0; 2.0 6.0 9.0; 2.0 6.0 3.0;;; 4.0 9.0 3.0; 3.0 10.0 5.0; 5.0 9.0 2.0;;; 5.0 2.0 4.0; 1.0 9.0 10.0; 10.0 4.0 7.0;;;; 8.0 3.0 1.0; 9.0 6.0 3.0; 6.0 1.0 7.0;;; 9.0 6.0 7.0; 7.0 11.0 6.0; 6.0 5.0 5.0;;; 5.0 2.0 8.0; 1.0 5.0 7.0; 8.0 1.0 11.0;;;; 9.0 5.0 9.0; 4.0 4.0 5.0; 8.0 6.0 8.0;;; 5.0 1.0 2.0; 9.0 11.0 7.0; 5.0 5.0 11.0;;; 6.0 7.0 7.0; 3.0 11.0 5.0; 3.0 3.0 6.0;;;;; 8.0 2.0 5.0; 5.0 7.0 3.0; 10.0 6.0 3.0;;; 6.0 10.0 1.0; 5.0 3.0 3.0; 3.0 2.0 9.0;;; 2.0 6.0 1.0; 9.0 8.0 5.0; 5.0 10.0 2.0;;;; 8.0 2.0 8.0; 8.0 11.0 10.0; 8.0 1.0 8.0;;; 7.0 2.0 2.0; 6.0 9.0 5.0; 2.0 5.0 7.0;;; 5.0 1.0 7.0; 1.0 7.0 4.0; 8.0 7.0 11.0;;;; 10.0 3.0 10.0; 5.0 4.0 3.0; 10.0 6.0 4.0;;; 4.0 6.0 4.0; 3.0 5.0 1.0; 4.0 1.0 2.0;;; 2.0 6.0 6.0; 6.0 5.0 5.0; 9.0 9.0 10.0;;;;; 10.0 2.0 3.0; 3.0 3.0 3.0; 3.0 10.0 5.0;;; 11.0 10.0 7.0; 10.0 10.0 2.0; 7.0 2.0 9.0;;; 5.0 3.0 6.0; 2.0 11.0 6.0; 2.0 1.0 10.0;;;; 8.0 1.0 8.0; 5.0 4.0 3.0; 4.0 3.0 2.0;;; 5.0 5.0 7.0; 3.0 2.0 2.0; 7.0 6.0 3.0;;; 4.0 6.0 8.0; 10.0 2.0 5.0; 8.0 6.0 8.0;;;; 9.0 9.0 6.0; 6.0 6.0 1.0; 6.0 4.0 6.0;;; 11.0 9.0 7.0; 2.0 4.0 5.0; 1.0 6.0 8.0;;; 7.0 1.0 3.0; 1.0 6.0 7.0; 1.0 2.0 4.0;;;;;;; 10.0 6.0 6.0; 7.0 2.0 8.0; 1.0 9.0 4.0;;; 9.0 2.0 8.0; 10.0 3.0 10.0; 7.0 9.0 6.0;;; 3.0 9.0 5.0; 8.0 4.0 9.0; 7.0 1.0 2.0;;;; 2.0 8.0 5.0; 6.0 11.0 1.0; 3.0 4.0 9.0;;; 3.0 1.0 6.0; 4.0 5.0 2.0; 9.0 8.0 8.0;;; 5.0 2.0 6.0; 10.0 8.0 10.0; 4.0 8.0 8.0;;;; 4.0 10.0 7.0; 5.0 5.0 2.0; 1.0 8.0 2.0;;; 8.0 2.0 8.0; 5.0 4.0 10.0; 10.0 5.0 5.0;;; 11.0 4.0 9.0; 8.0 2.0 3.0; 1.0 5.0 8.0;;;;; 7.0 8.0 4.0; 10.0 11.0 5.0; 8.0 10.0 5.0;;; 4.0 7.0 9.0; 5.0 6.0 3.0; 4.0 8.0 2.0;;; 2.0 3.0 8.0; 3.0 6.0 5.0; 3.0 9.0 8.0;;;; 8.0 7.0 6.0; 3.0 2.0 7.0; 9.0 5.0 3.0;;; 4.0 4.0 3.0; 10.0 4.0 1.0; 1.0 2.0 2.0;;; 4.0 3.0 3.0; 8.0 10.0 2.0; 6.0 8.0 10.0;;;; 5.0 2.0 4.0; 3.0 5.0 10.0; 7.0 4.0 3.0;;; 8.0 4.0 4.0; 10.0 2.0 8.0; 10.0 10.0 2.0;;; 11.0 4.0 5.0; 8.0 11.0 7.0; 3.0 2.0 8.0;;;;; 10.0 1.0 4.0; 6.0 7.0 8.0; 10.0 1.0 7.0;;; 10.0 10.0 1.0; 10.0 11.0 10.0; 6.0 5.0 10.0;;; 11.0 5.0 1.0; 9.0 11.0 5.0; 1.0 1.0 4.0;;;; 9.0 6.0 9.0; 10.0 4.0 1.0; 5.0 8.0 9.0;;; 11.0 6.0 8.0; 5.0 11.0 9.0; 1.0 7.0 8.0;;; 8.0 6.0 4.0; 6.0 6.0 3.0; 3.0 7.0 8.0;;;; 5.0 3.0 9.0; 5.0 9.0 8.0; 1.0 6.0 11.0;;; 4.0 3.0 5.0; 8.0 11.0 4.0; 7.0 9.0 6.0;;; 3.0 2.0 3.0; 3.0 10.0 4.0; 10.0 2.0 7.0;;;;;; 7.0 1.0 7.0; 2.0 9.0 10.0; 5.0 4.0 10.0;;; 6.0 1.0 10.0; 7.0 4.0 10.0; 9.0 4.0 8.0;;; 11.0 8.0 10.0; 9.0 9.0 5.0; 6.0 4.0 9.0;;;; 6.0 6.0 7.0; 7.0 11.0 8.0; 8.0 7.0 3.0;;; 8.0 10.0 1.0; 5.0 8.0 4.0; 8.0 5.0 3.0;;; 7.0 7.0 10.0; 10.0 10.0 5.0; 3.0 10.0 8.0;;;; 10.0 6.0 6.0; 10.0 4.0 5.0; 6.0 2.0 10.0;;; 4.0 4.0 3.0; 6.0 8.0 4.0; 10.0 9.0 5.0;;; 10.0 6.0 10.0; 9.0 2.0 7.0; 4.0 8.0 3.0;;;;; 6.0 5.0 10.0; 10.0 4.0 5.0; 1.0 10.0 3.0;;; 3.0 9.0 6.0; 2.0 9.0 2.0; 4.0 3.0 7.0;;; 3.0 1.0 7.0; 6.0 9.0 4.0; 1.0 8.0 8.0;;;; 11.0 6.0 6.0; 3.0 6.0 8.0; 5.0 9.0 8.0;;; 6.0 2.0 9.0; 5.0 3.0 9.0; 3.0 2.0 9.0;;; 3.0 3.0 4.0; 8.0 10.0 5.0; 9.0 8.0 10.0;;;; 9.0 2.0 5.0; 10.0 5.0 7.0; 5.0 6.0 11.0;;; 7.0 2.0 5.0; 1.0 7.0 4.0; 10.0 2.0 6.0;;; 11.0 10.0 3.0; 4.0 2.0 6.0; 4.0 5.0 5.0;;;;; 11.0 8.0 10.0; 2.0 7.0 2.0; 7.0 10.0 7.0;;; 4.0 4.0 3.0; 2.0 9.0 8.0; 8.0 2.0 8.0;;; 9.0 3.0 7.0; 3.0 6.0 3.0; 6.0 4.0 6.0;;;; 4.0 6.0 7.0; 1.0 2.0 1.0; 10.0 4.0 8.0;;; 7.0 9.0 6.0; 1.0 7.0 1.0; 5.0 5.0 5.0;;; 6.0 1.0 3.0; 7.0 4.0 1.0; 8.0 3.0 10.0;;;; 5.0 8.0 4.0; 4.0 9.0 5.0; 6.0 7.0 9.0;;; 4.0 7.0 4.0; 5.0 11.0 5.0; 4.0 7.0 4.0;;; 3.0 6.0 7.0; 6.0 4.0 9.0; 8.0 6.0 2.0;;;;;; 3.0 8.0 9.0; 7.0 11.0 9.0; 3.0 7.0 6.0;;; 10.0 1.0 3.0; 9.0 5.0 8.0; 9.0 4.0 11.0;;; 6.0 10.0 5.0; 9.0 9.0 4.0; 6.0 8.0 5.0;;;; 2.0 1.0 9.0; 6.0 11.0 5.0; 6.0 4.0 7.0;;; 8.0 4.0 7.0; 6.0 6.0 6.0; 2.0 8.0 8.0;;; 6.0 9.0 8.0; 2.0 9.0 3.0; 10.0 5.0 11.0;;;; 3.0 6.0 7.0; 9.0 7.0 7.0; 10.0 4.0 8.0;;; 11.0 4.0 4.0; 7.0 6.0 2.0; 8.0 10.0 6.0;;; 5.0 3.0 5.0; 1.0 4.0 2.0; 3.0 4.0 10.0;;;;; 10.0 7.0 9.0; 7.0 6.0 9.0; 5.0 6.0 9.0;;; 3.0 7.0 7.0; 10.0 11.0 4.0; 6.0 4.0 9.0;;; 11.0 4.0 2.0; 8.0 5.0 4.0; 2.0 5.0 9.0;;;; 4.0 4.0 1.0; 5.0 5.0 3.0; 10.0 8.0 3.0;;; 10.0 7.0 10.0; 9.0 10.0 2.0; 1.0 10.0 9.0;;; 5.0 7.0 10.0; 1.0 11.0 5.0; 5.0 9.0 3.0;;;; 4.0 4.0 9.0; 4.0 9.0 6.0; 9.0 6.0 7.0;;; 6.0 10.0 4.0; 9.0 8.0 2.0; 4.0 6.0 6.0;;; 6.0 1.0 9.0; 7.0 5.0 9.0; 10.0 7.0 9.0;;;;; 6.0 10.0 7.0; 1.0 7.0 10.0; 10.0 3.0 7.0;;; 5.0 9.0 3.0; 7.0 6.0 5.0; 9.0 9.0 8.0;;; 6.0 4.0 2.0; 10.0 6.0 9.0; 2.0 8.0 6.0;;;; 3.0 8.0 8.0; 5.0 3.0 7.0; 5.0 6.0 9.0;;; 4.0 9.0 7.0; 4.0 10.0 2.0; 5.0 9.0 3.0;;; 5.0 8.0 10.0; 10.0 7.0 8.0; 3.0 4.0 7.0;;;; 6.0 10.0 1.0; 9.0 11.0 2.0; 1.0 10.0 3.0;;; 9.0 6.0 9.0; 2.0 7.0 3.0; 9.0 10.0 5.0;;; 9.0 6.0 5.0; 8.0 9.0 10.0; 2.0 5.0 10.0;;;;;;;;
                        10.0 4.0 4.0; 10.0 10.0 6.0; 4.0 7.0 6.0;;; 8.0 8.0 4.0; 5.0 9.0 9.0; 5.0 10.0 11.0;;; 11.0 4.0 9.0; 6.0 8.0 9.0; 5.0 3.0 8.0;;;; 5.0 8.0 1.0; 6.0 11.0 10.0; 2.0 2.0 11.0;;; 9.0 7.0 3.0; 1.0 10.0 9.0; 2.0 6.0 5.0;;; 8.0 8.0 2.0; 6.0 7.0 1.0; 7.0 3.0 3.0;;;; 9.0 10.0 10.0; 8.0 3.0 1.0; 7.0 7.0 4.0;;; 2.0 2.0 6.0; 10.0 5.0 3.0; 8.0 4.0 9.0;;; 2.0 3.0 9.0; 1.0 8.0 1.0; 1.0 2.0 8.0;;;;; 10.0 6.0 7.0; 1.0 8.0 4.0; 8.0 10.0 3.0;;; 4.0 6.0 3.0; 4.0 5.0 8.0; 10.0 2.0 8.0;;; 8.0 8.0 4.0; 4.0 4.0 2.0; 10.0 4.0 11.0;;;; 3.0 6.0 4.0; 3.0 6.0 9.0; 4.0 5.0 8.0;;; 3.0 3.0 10.0; 8.0 8.0 2.0; 10.0 1.0 9.0;;; 4.0 6.0 1.0; 2.0 8.0 2.0; 8.0 5.0 8.0;;;; 4.0 9.0 6.0; 10.0 2.0 6.0; 10.0 9.0 4.0;;; 4.0 7.0 3.0; 6.0 10.0 2.0; 8.0 2.0 3.0;;; 4.0 6.0 1.0; 9.0 9.0 1.0; 4.0 1.0 6.0;;;;; 4.0 5.0 7.0; 5.0 11.0 5.0; 8.0 10.0 4.0;;; 3.0 9.0 7.0; 9.0 8.0 4.0; 5.0 3.0 6.0;;; 11.0 4.0 1.0; 10.0 10.0 5.0; 9.0 2.0 9.0;;;; 9.0 9.0 7.0; 10.0 5.0 10.0; 5.0 5.0 6.0;;; 4.0 5.0 10.0; 7.0 5.0 7.0; 4.0 9.0 10.0;;; 6.0 4.0 4.0; 9.0 11.0 4.0; 4.0 4.0 10.0;;;; 6.0 9.0 8.0; 7.0 2.0 7.0; 8.0 5.0 7.0;;; 9.0 8.0 4.0; 9.0 5.0 5.0; 6.0 9.0 10.0;;; 3.0 9.0 1.0; 5.0 4.0 8.0; 4.0 6.0 9.0;;;;;; 8.0 1.0 10.0; 5.0 6.0 3.0; 5.0 4.0 10.0;;; 7.0 3.0 7.0; 4.0 11.0 8.0; 4.0 6.0 6.0;;; 11.0 10.0 5.0; 5.0 6.0 1.0; 10.0 1.0 11.0;;;; 9.0 1.0 6.0; 8.0 11.0 6.0; 7.0 8.0 10.0;;; 10.0 3.0 9.0; 6.0 6.0 3.0; 4.0 4.0 6.0;;; 4.0 10.0 9.0; 1.0 5.0 1.0; 2.0 7.0 7.0;;;; 8.0 10.0 8.0; 1.0 2.0 2.0; 1.0 5.0 2.0;;; 5.0 10.0 5.0; 2.0 11.0 9.0; 4.0 1.0 5.0;;; 11.0 10.0 7.0; 7.0 9.0 1.0; 10.0 6.0 10.0;;;;; 2.0 7.0 4.0; 10.0 11.0 5.0; 4.0 6.0 5.0;;; 4.0 5.0 9.0; 2.0 6.0 5.0; 1.0 8.0 6.0;;; 11.0 2.0 2.0; 4.0 2.0 10.0; 10.0 3.0 11.0;;;; 10.0 3.0 5.0; 4.0 6.0 1.0; 4.0 6.0 6.0;;; 10.0 1.0 3.0; 9.0 7.0 4.0; 8.0 1.0 11.0;;; 10.0 7.0 3.0; 5.0 8.0 6.0; 2.0 10.0 8.0;;;; 4.0 2.0 6.0; 8.0 8.0 3.0; 5.0 2.0 6.0;;; 3.0 10.0 8.0; 7.0 4.0 9.0; 3.0 3.0 2.0;;; 7.0 7.0 1.0; 4.0 11.0 4.0; 10.0 6.0 9.0;;;;; 4.0 9.0 3.0; 7.0 9.0 2.0; 2.0 5.0 2.0;;; 9.0 10.0 1.0; 7.0 4.0 6.0; 7.0 10.0 3.0;;; 2.0 9.0 10.0; 2.0 4.0 9.0; 7.0 10.0 5.0;;;; 7.0 4.0 1.0; 2.0 5.0 10.0; 3.0 10.0 9.0;;; 11.0 5.0 1.0; 6.0 9.0 7.0; 1.0 3.0 11.0;;; 5.0 7.0 1.0; 5.0 9.0 4.0; 1.0 4.0 9.0;;;; 9.0 8.0 2.0; 6.0 3.0 2.0; 2.0 9.0 11.0;;; 10.0 10.0 2.0; 10.0 11.0 2.0; 2.0 4.0 6.0;;; 3.0 2.0 1.0; 6.0 2.0 2.0; 6.0 7.0 8.0;;;;;; 7.0 7.0 1.0; 7.0 8.0 1.0; 1.0 6.0 11.0;;; 7.0 9.0 2.0; 4.0 4.0 7.0; 7.0 8.0 3.0;;; 6.0 1.0 2.0; 2.0 5.0 3.0; 4.0 7.0 3.0;;;; 9.0 6.0 8.0; 8.0 4.0 10.0; 7.0 4.0 11.0;;; 9.0 9.0 10.0; 8.0 11.0 10.0; 7.0 5.0 10.0;;; 3.0 2.0 8.0; 2.0 7.0 10.0; 6.0 6.0 11.0;;;; 7.0 4.0 5.0; 5.0 5.0 8.0; 5.0 4.0 4.0;;; 7.0 3.0 6.0; 6.0 4.0 10.0; 6.0 5.0 7.0;;; 5.0 5.0 10.0; 9.0 11.0 5.0; 2.0 2.0 10.0;;;;; 11.0 9.0 9.0; 10.0 5.0 6.0; 2.0 3.0 6.0;;; 11.0 2.0 6.0; 3.0 4.0 9.0; 8.0 10.0 11.0;;; 11.0 2.0 5.0; 10.0 6.0 9.0; 9.0 3.0 11.0;;;; 6.0 7.0 3.0; 10.0 6.0 2.0; 6.0 1.0 4.0;;; 3.0 8.0 3.0; 10.0 10.0 1.0; 1.0 1.0 11.0;;; 3.0 7.0 4.0; 1.0 2.0 2.0; 2.0 2.0 9.0;;;; 11.0 10.0 6.0; 9.0 8.0 3.0; 10.0 2.0 4.0;;; 3.0 7.0 8.0; 1.0 10.0 1.0; 6.0 5.0 7.0;;; 5.0 9.0 10.0; 7.0 11.0 2.0; 6.0 2.0 9.0;;;;; 7.0 9.0 1.0; 7.0 6.0 10.0; 8.0 2.0 3.0;;; 3.0 3.0 5.0; 8.0 2.0 10.0; 8.0 5.0 7.0;;; 4.0 4.0 2.0; 9.0 10.0 9.0; 7.0 9.0 9.0;;;; 4.0 10.0 7.0; 6.0 6.0 10.0; 10.0 5.0 9.0;;; 7.0 7.0 5.0; 8.0 9.0 7.0; 3.0 1.0 2.0;;; 9.0 10.0 10.0; 1.0 11.0 1.0; 1.0 2.0 9.0;;;; 8.0 8.0 6.0; 10.0 3.0 2.0; 2.0 9.0 6.0;;; 11.0 1.0 3.0; 6.0 3.0 5.0; 6.0 8.0 2.0;;; 10.0 5.0 5.0; 10.0 6.0 2.0; 7.0 7.0 9.0;;;;;;; 3.0 7.0 1.0; 10.0 9.0 6.0; 1.0 6.0 2.0;;; 11.0 1.0 1.0; 1.0 8.0 1.0; 4.0 2.0 9.0;;; 10.0 3.0 6.0; 3.0 2.0 3.0; 5.0 10.0 5.0;;;; 9.0 6.0 9.0; 7.0 7.0 9.0; 2.0 9.0 2.0;;; 6.0 2.0 1.0; 10.0 3.0 3.0; 6.0 3.0 3.0;;; 2.0 10.0 10.0; 9.0 4.0 2.0; 5.0 2.0 11.0;;;; 2.0 2.0 5.0; 6.0 3.0 5.0; 8.0 8.0 10.0;;; 4.0 9.0 4.0; 6.0 3.0 7.0; 5.0 3.0 9.0;;; 9.0 10.0 4.0; 1.0 5.0 3.0; 6.0 1.0 11.0;;;;; 5.0 7.0 6.0; 1.0 5.0 5.0; 5.0 3.0 5.0;;; 7.0 1.0 4.0; 3.0 3.0 3.0; 2.0 6.0 3.0;;; 4.0 5.0 3.0; 8.0 9.0 2.0; 1.0 3.0 8.0;;;; 7.0 2.0 6.0; 1.0 11.0 5.0; 10.0 9.0 6.0;;; 10.0 7.0 10.0; 4.0 2.0 5.0; 4.0 8.0 3.0;;; 4.0 10.0 3.0; 9.0 7.0 1.0; 4.0 9.0 2.0;;;; 4.0 10.0 10.0; 2.0 4.0 6.0; 10.0 7.0 2.0;;; 3.0 7.0 6.0; 2.0 8.0 6.0; 4.0 4.0 6.0;;; 11.0 5.0 10.0; 10.0 9.0 7.0; 5.0 4.0 4.0;;;;; 6.0 6.0 6.0; 8.0 10.0 8.0; 2.0 8.0 11.0;;; 9.0 6.0 7.0; 6.0 2.0 2.0; 3.0 5.0 10.0;;; 7.0 2.0 3.0; 5.0 2.0 3.0; 3.0 9.0 2.0;;;; 7.0 2.0 7.0; 3.0 6.0 1.0; 2.0 6.0 6.0;;; 4.0 6.0 8.0; 4.0 3.0 4.0; 1.0 2.0 9.0;;; 6.0 2.0 5.0; 1.0 10.0 3.0; 7.0 2.0 10.0;;;; 3.0 8.0 4.0; 8.0 11.0 5.0; 3.0 9.0 2.0;;; 5.0 8.0 8.0; 8.0 2.0 10.0; 7.0 7.0 9.0;;; 7.0 8.0 7.0; 10.0 8.0 7.0; 7.0 2.0 7.0;;;;;; 7.0 5.0 8.0; 5.0 3.0 7.0; 6.0 2.0 3.0;;; 9.0 3.0 2.0; 10.0 3.0 1.0; 2.0 5.0 11.0;;; 9.0 10.0 9.0; 7.0 9.0 5.0; 5.0 1.0 11.0;;;; 7.0 7.0 6.0; 6.0 10.0 4.0; 6.0 8.0 5.0;;; 10.0 4.0 5.0; 1.0 5.0 3.0; 1.0 2.0 10.0;;; 11.0 10.0 2.0; 6.0 5.0 5.0; 1.0 1.0 4.0;;;; 8.0 2.0 2.0; 1.0 9.0 1.0; 9.0 8.0 8.0;;; 9.0 8.0 8.0; 4.0 5.0 4.0; 6.0 5.0 10.0;;; 2.0 10.0 2.0; 3.0 5.0 4.0; 9.0 4.0 9.0;;;;; 9.0 3.0 7.0; 6.0 9.0 10.0; 8.0 4.0 7.0;;; 5.0 1.0 8.0; 3.0 10.0 2.0; 10.0 4.0 4.0;;; 6.0 3.0 1.0; 2.0 11.0 9.0; 3.0 9.0 2.0;;;; 8.0 10.0 8.0; 5.0 4.0 4.0; 2.0 8.0 8.0;;; 2.0 1.0 1.0; 7.0 10.0 10.0; 4.0 7.0 10.0;;; 11.0 9.0 4.0; 10.0 6.0 7.0; 3.0 5.0 8.0;;;; 10.0 7.0 7.0; 7.0 5.0 3.0; 5.0 7.0 6.0;;; 10.0 2.0 5.0; 4.0 11.0 5.0; 3.0 5.0 9.0;;; 2.0 2.0 2.0; 5.0 2.0 1.0; 9.0 5.0 5.0;;;;; 5.0 4.0 2.0; 7.0 7.0 2.0; 7.0 6.0 6.0;;; 11.0 8.0 1.0; 4.0 2.0 1.0; 5.0 10.0 8.0;;; 10.0 2.0 1.0; 10.0 4.0 3.0; 6.0 10.0 3.0;;;; 10.0 7.0 1.0; 3.0 3.0 1.0; 3.0 9.0 11.0;;; 7.0 7.0 9.0; 7.0 6.0 7.0; 7.0 3.0 5.0;;; 10.0 8.0 1.0; 3.0 3.0 4.0; 7.0 6.0 4.0;;;; 8.0 6.0 10.0; 1.0 11.0 6.0; 6.0 1.0 9.0;;; 11.0 3.0 7.0; 3.0 6.0 6.0; 8.0 6.0 5.0;;; 9.0 6.0 5.0; 5.0 2.0 7.0; 8.0 9.0 3.0;;;;;; 6.0 4.0 1.0; 8.0 9.0 3.0; 3.0 8.0 2.0;;; 5.0 8.0 2.0; 2.0 2.0 5.0; 10.0 8.0 7.0;;; 4.0 9.0 3.0; 8.0 5.0 1.0; 9.0 5.0 10.0;;;; 8.0 2.0 8.0; 6.0 9.0 4.0; 6.0 7.0 2.0;;; 5.0 6.0 9.0; 5.0 3.0 3.0; 2.0 6.0 2.0;;; 5.0 4.0 7.0; 7.0 3.0 8.0; 1.0 4.0 2.0;;;; 8.0 7.0 7.0; 9.0 5.0 4.0; 5.0 5.0 11.0;;; 5.0 9.0 7.0; 2.0 3.0 1.0; 6.0 5.0 8.0;;; 2.0 2.0 9.0; 8.0 10.0 7.0; 10.0 2.0 6.0;;;;; 2.0 5.0 2.0; 6.0 10.0 10.0; 8.0 3.0 8.0;;; 11.0 1.0 8.0; 10.0 11.0 9.0; 9.0 3.0 7.0;;; 6.0 5.0 8.0; 9.0 9.0 10.0; 4.0 6.0 9.0;;;; 9.0 9.0 4.0; 1.0 3.0 8.0; 1.0 7.0 2.0;;; 6.0 9.0 5.0; 4.0 3.0 2.0; 9.0 9.0 8.0;;; 5.0 2.0 9.0; 8.0 6.0 6.0; 3.0 10.0 8.0;;;; 4.0 4.0 6.0; 4.0 6.0 5.0; 5.0 1.0 6.0;;; 3.0 8.0 10.0; 8.0 10.0 5.0; 9.0 1.0 10.0;;; 8.0 1.0 1.0; 1.0 2.0 9.0; 6.0 1.0 7.0;;;;; 6.0 10.0 10.0; 10.0 4.0 6.0; 4.0 4.0 11.0;;; 4.0 8.0 6.0; 9.0 6.0 7.0; 9.0 3.0 4.0;;; 3.0 10.0 1.0; 8.0 9.0 5.0; 4.0 5.0 5.0;;;; 5.0 5.0 4.0; 6.0 3.0 5.0; 3.0 3.0 8.0;;; 3.0 9.0 6.0; 8.0 5.0 9.0; 8.0 3.0 6.0;;; 5.0 2.0 4.0; 5.0 9.0 2.0; 5.0 9.0 5.0;;;; 8.0 6.0 8.0; 9.0 11.0 3.0; 4.0 3.0 10.0;;; 11.0 2.0 7.0; 2.0 9.0 9.0; 3.0 2.0 5.0;;; 11.0 6.0 1.0; 5.0 8.0 6.0; 4.0 9.0 11.0;;;;;;; 3.0 6.0 3.0; 3.0 6.0 8.0; 5.0 4.0 6.0;;; 7.0 10.0 6.0; 7.0 4.0 6.0; 4.0 10.0 8.0;;; 11.0 3.0 4.0; 5.0 9.0 4.0; 9.0 1.0 10.0;;;; 3.0 9.0 10.0; 5.0 8.0 4.0; 7.0 4.0 8.0;;; 5.0 4.0 6.0; 6.0 4.0 5.0; 7.0 3.0 7.0;;; 5.0 10.0 5.0; 10.0 11.0 9.0; 9.0 7.0 6.0;;;; 7.0 8.0 6.0; 6.0 11.0 3.0; 5.0 4.0 5.0;;; 6.0 7.0 3.0; 10.0 7.0 9.0; 10.0 1.0 9.0;;; 8.0 9.0 2.0; 10.0 6.0 4.0; 10.0 7.0 3.0;;;;; 6.0 9.0 2.0; 5.0 11.0 2.0; 5.0 7.0 4.0;;; 8.0 1.0 9.0; 3.0 6.0 7.0; 7.0 9.0 5.0;;; 5.0 7.0 6.0; 2.0 5.0 3.0; 2.0 1.0 10.0;;;; 5.0 5.0 10.0; 7.0 7.0 8.0; 2.0 3.0 10.0;;; 8.0 5.0 9.0; 2.0 5.0 9.0; 1.0 3.0 7.0;;; 9.0 9.0 6.0; 2.0 11.0 2.0; 2.0 10.0 4.0;;;; 5.0 7.0 3.0; 10.0 7.0 8.0; 3.0 9.0 9.0;;; 7.0 4.0 6.0; 7.0 11.0 2.0; 9.0 6.0 6.0;;; 3.0 10.0 10.0; 4.0 3.0 4.0; 10.0 7.0 9.0;;;;; 8.0 3.0 2.0; 10.0 9.0 9.0; 4.0 5.0 7.0;;; 9.0 9.0 2.0; 1.0 10.0 7.0; 10.0 2.0 2.0;;; 3.0 9.0 4.0; 8.0 6.0 9.0; 6.0 10.0 7.0;;;; 2.0 1.0 10.0; 5.0 9.0 8.0; 3.0 3.0 9.0;;; 8.0 8.0 1.0; 4.0 5.0 10.0; 1.0 9.0 9.0;;; 3.0 8.0 4.0; 10.0 9.0 3.0; 6.0 8.0 7.0;;;; 5.0 10.0 10.0; 6.0 2.0 7.0; 7.0 9.0 4.0;;; 8.0 5.0 1.0; 1.0 7.0 6.0; 9.0 9.0 9.0;;; 4.0 9.0 7.0; 6.0 2.0 4.0; 3.0 3.0 11.0;;;;;; 6.0 1.0 1.0; 8.0 8.0 2.0; 1.0 2.0 6.0;;; 4.0 5.0 7.0; 5.0 10.0 7.0; 4.0 5.0 7.0;;; 11.0 8.0 5.0; 5.0 2.0 9.0; 7.0 3.0 4.0;;;; 9.0 4.0 8.0; 7.0 6.0 9.0; 6.0 4.0 4.0;;; 4.0 7.0 2.0; 6.0 4.0 10.0; 9.0 2.0 4.0;;; 9.0 4.0 6.0; 5.0 9.0 5.0; 8.0 6.0 4.0;;;; 4.0 5.0 6.0; 9.0 8.0 6.0; 10.0 1.0 8.0;;; 4.0 8.0 3.0; 2.0 11.0 1.0; 2.0 3.0 2.0;;; 5.0 1.0 6.0; 2.0 5.0 5.0; 6.0 10.0 3.0;;;;; 3.0 8.0 10.0; 6.0 7.0 10.0; 5.0 8.0 10.0;;; 6.0 9.0 6.0; 3.0 2.0 9.0; 1.0 3.0 7.0;;; 11.0 5.0 8.0; 9.0 3.0 7.0; 8.0 6.0 7.0;;;; 4.0 8.0 3.0; 7.0 5.0 9.0; 7.0 8.0 4.0;;; 2.0 6.0 7.0; 9.0 6.0 9.0; 9.0 1.0 7.0;;; 11.0 10.0 6.0; 6.0 4.0 9.0; 4.0 7.0 10.0;;;; 2.0 2.0 9.0; 5.0 3.0 8.0; 9.0 9.0 8.0;;; 7.0 6.0 2.0; 6.0 9.0 1.0; 1.0 6.0 3.0;;; 6.0 10.0 6.0; 10.0 9.0 4.0; 3.0 1.0 11.0;;;;; 3.0 2.0 5.0; 6.0 8.0 3.0; 9.0 3.0 9.0;;; 4.0 3.0 3.0; 3.0 6.0 10.0; 9.0 4.0 8.0;;; 4.0 5.0 3.0; 3.0 3.0 10.0; 5.0 6.0 7.0;;;; 9.0 3.0 3.0; 3.0 5.0 6.0; 1.0 9.0 9.0;;; 10.0 10.0 8.0; 7.0 3.0 6.0; 1.0 5.0 4.0;;; 2.0 3.0 2.0; 9.0 2.0 7.0; 3.0 6.0 7.0;;;; 3.0 5.0 10.0; 4.0 8.0 2.0; 1.0 4.0 5.0;;; 4.0 2.0 2.0; 8.0 6.0 9.0; 6.0 1.0 9.0;;; 8.0 4.0 10.0; 3.0 11.0 10.0; 6.0 1.0 2.0;;;;;; 9.0 8.0 4.0; 8.0 9.0 5.0; 8.0 3.0 9.0;;; 4.0 8.0 6.0; 8.0 3.0 10.0; 8.0 4.0 10.0;;; 5.0 4.0 2.0; 6.0 10.0 6.0; 6.0 3.0 7.0;;;; 4.0 2.0 9.0; 7.0 11.0 9.0; 8.0 2.0 3.0;;; 4.0 5.0 6.0; 3.0 4.0 1.0; 9.0 10.0 2.0;;; 8.0 1.0 4.0; 8.0 10.0 2.0; 5.0 2.0 11.0;;;; 4.0 4.0 7.0; 5.0 9.0 5.0; 6.0 7.0 6.0;;; 7.0 5.0 6.0; 10.0 4.0 2.0; 10.0 3.0 2.0;;; 9.0 4.0 3.0; 7.0 8.0 1.0; 8.0 7.0 2.0;;;;; 10.0 7.0 2.0; 3.0 3.0 9.0; 1.0 5.0 8.0;;; 3.0 4.0 1.0; 8.0 7.0 10.0; 9.0 4.0 11.0;;; 3.0 1.0 8.0; 1.0 11.0 8.0; 4.0 2.0 4.0;;;; 8.0 8.0 6.0; 4.0 9.0 9.0; 7.0 10.0 7.0;;; 11.0 6.0 9.0; 7.0 10.0 5.0; 7.0 8.0 11.0;;; 6.0 7.0 6.0; 6.0 11.0 1.0; 10.0 9.0 10.0;;;; 8.0 2.0 1.0; 6.0 10.0 5.0; 1.0 5.0 10.0;;; 6.0 1.0 7.0; 6.0 10.0 10.0; 5.0 8.0 11.0;;; 4.0 10.0 10.0; 5.0 4.0 2.0; 3.0 3.0 4.0;;;;; 10.0 8.0 10.0; 8.0 4.0 4.0; 5.0 6.0 11.0;;; 11.0 10.0 2.0; 10.0 2.0 10.0; 1.0 1.0 5.0;;; 2.0 10.0 4.0; 6.0 2.0 5.0; 3.0 4.0 2.0;;;; 8.0 10.0 1.0; 10.0 10.0 10.0; 8.0 6.0 8.0;;; 9.0 6.0 3.0; 9.0 8.0 5.0; 4.0 6.0 11.0;;; 3.0 1.0 5.0; 7.0 7.0 6.0; 2.0 9.0 6.0;;;; 2.0 7.0 2.0; 3.0 4.0 9.0; 1.0 10.0 3.0;;; 5.0 2.0 6.0; 7.0 10.0 10.0; 4.0 3.0 3.0;;; 10.0 2.0 1.0; 4.0 8.0 4.0; 7.0 9.0 8.0
                    ]
                ),
                m_T1 = Categorical([0.2, 0.5, 0.3]),
                m_T2 = Categorical([0.7, 0.2, 0.1]),
                m_T3 = Categorical([0.1, 0.8, 0.1]),
                m_T4 = Categorical([0.9, 0.1, 0.0]),
                m_T5 = Categorical([0.05, 0.1, 0.85]),
                m_T6 = Categorical([0.33, 0.33, 0.34])
            ),
            output = Categorical([0.3086008421749098, 0.40029062132154786, 0.2911085365035422])
        )
    ]
end
